@module: module-structure
@version: 1.0.0
@priority: High

overview: |
  Specification for the project's module structure, defining the organization,
  relationships, and conventions for all modules in the system.

module_types:
  frontend:
    root: "src/frontend"
    purpose: "Client-side application code"
    key_directories:
      - name: "components"
        purpose: "Web components and UI elements"
      - name: "styles"
        purpose: "Global styles and themes"
      - name: "utils"
        purpose: "Frontend utilities"
      - name: "routes"
        purpose: "Application routing"
      - name: "stores"
        purpose: "State management"

  backend:
    root: "src/backend"
    purpose: "Server-side application code"
    key_directories:
      - name: "routes"
        purpose: "API endpoints"
      - name: "services"
        purpose: "Business logic"
      - name: "models"
        purpose: "Data models"
      - name: "middleware"
        purpose: "Request/response middleware"
      - name: "utils"
        purpose: "Backend utilities"

  shared:
    root: "src/shared"
    purpose: "Code shared between frontend and backend"
    key_directories:
      - name: "types"
        purpose: "TypeScript type definitions"
      - name: "constants"
        purpose: "Shared constants"
      - name: "utils"
        purpose: "Common utilities"
      - name: "validation"
        purpose: "Shared validation schemas"

dependencies:
  rules:
    - "Frontend can depend on shared"
    - "Backend can depend on shared"
    - "Shared cannot depend on frontend or backend"
    - "No circular dependencies allowed"
    - "Each module must have explicit exports"

  management:
    tool: "typescript"
    features:
      - "Path aliases"
      - "Module resolution"
      - "Type checking"

naming_conventions:
  directories:
    - "Use kebab-case for directory names"
    - "Use plural for collection directories"
    - "Use singular for concept directories"

  files:
    - "Use kebab-case for file names"
    - "Use .ts extension for TypeScript files"
    - "Use .test.ts suffix for test files"
    - "Use .d.ts suffix for type definitions"

module_boundaries:
  enforcement:
    tool: "eslint"
    rules:
      - "no-restricted-imports"
      - "import/no-cycle"
      - "import/no-internal-modules"

  visibility:
    - "Export public API through index files"
    - "Keep implementation details private"
    - "Use barrel exports for public interfaces"

testing:
  structure:
    - "Tests colocated with source files"
    - "Separate test utilities by module"
    - "Shared test fixtures in shared module"

  conventions:
    - "Use describe blocks for features"
    - "Use it blocks for specifications"
    - "Follow AAA pattern"
    - "Mock external dependencies"

documentation:
  requirements:
    - "README.md in each module root"
    - "API documentation for public interfaces"
    - "Usage examples for shared code"
    - "Architecture diagrams for complex flows"

  organization:
    - "Module-specific documentation in module"
    - "Cross-module documentation in docs/"
    - "API documentation generated from code"

versioning:
  strategy: "Independent versioning"
  requirements:
    - "Semantic versioning"
    - "Changelog per module"
    - "Version compatibility matrix"
    - "Migration guides"

build:
  process:
    - "Independent module builds"
    - "Shared code built first"
    - "Type generation during build"
    - "Bundle analysis"

  artifacts:
    - "Separate bundles per module"
    - "Type definition files"
    - "Source maps"
    - "Asset manifests"

future_considerations:
  - "Microservices architecture support"
  - "Plugin system"
  - "Dynamic module loading"
  - "Module federation"
  - "Independent deployment"
