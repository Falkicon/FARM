@feature: user-management
@module: backend
@priority: High
@status: implemented
@dependencies: ["fastify", "prisma", "zod"]

overview: |
  The User Management system provides comprehensive CRUD operations for managing users
  in the system. It includes role-based access control, data validation, and integrates
  with the authentication system for secure user operations.

data_model:
  user:
    type: "object"
    required: ["id", "name", "email", "role"]
    properties:
      id:
        type: "string"
        description: "Unique identifier for the user"
      name:
        type: "string"
        description: "User's full name"
      email:
        type: "string"
        format: "email"
        description: "User's email address"
      role:
        type: "string"
        enum: ["user", "admin"]
        description: "User's role in the system"

endpoints:
  list_users:
    path: "/users"
    method: "GET"
    description: "List all users in the system"
    authentication: true
    authorization: ["admin"]
    response_schema:
      type: "object"
      properties:
        users:
          type: "array"
          items:
            $ref: "#/data_model/user"

  get_user:
    path: "/users/:id"
    method: "GET"
    description: "Get details of a specific user"
    authentication: true
    authorization: ["admin", "self"]
    parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
    response_schema:
      success:
        type: "object"
        properties:
          user:
            $ref: "#/data_model/user"
      error:
        type: "object"
        properties:
          statusCode:
            type: "number"
          message:
            type: "string"

  create_user:
    path: "/users"
    method: "POST"
    description: "Create a new user"
    authentication: true
    authorization: ["admin"]
    request_schema:
      type: "object"
      required: ["name", "email"]
      properties:
        name:
          type: "string"
          minLength: 2
        email:
          type: "string"
          format: "email"
        role:
          type: "string"
          enum: ["user", "admin"]
          default: "user"
    response_schema:
      type: "object"
      properties:
        user:
          $ref: "#/data_model/user"

  update_user:
    path: "/users/:id"
    method: "PUT"
    description: "Update user details"
    authentication: true
    authorization: ["admin", "self"]
    request_schema:
      type: "object"
      properties:
        name:
          type: "string"
          minLength: 2
        email:
          type: "string"
          format: "email"
        role:
          type: "string"
          enum: ["user", "admin"]

  delete_user:
    path: "/users/:id"
    method: "DELETE"
    description: "Delete a user"
    authentication: true
    authorization: ["admin"]
    response_schema:
      type: "object"
      properties:
        success:
          type: "boolean"

validation:
  rules:
    name:
      - "Minimum 2 characters"
      - "Maximum 100 characters"
      - "No special characters except spaces and hyphens"

    email:
      - "Valid email format"
      - "Unique in the system"
      - "Maximum 255 characters"
      - "Lowercase storage"

    role:
      - "Valid role enum value"
      - "Default to 'user' if not specified"
      - "Only admins can set admin role"

permissions:
  roles:
    admin:
      - "Create users"
      - "Read all users"
      - "Update any user"
      - "Delete users"
      - "Manage user roles"

    user:
      - "Read own profile"
      - "Update own profile"
      - "Cannot change own role"
      - "Cannot delete account"

error_handling:
  scenarios:
    - error: "User not found"
      status: 404
      message: "User with specified ID not found"

    - error: "Email exists"
      status: 409
      message: "Email address already in use"

    - error: "Invalid role"
      status: 400
      message: "Invalid role specified"

    - error: "Unauthorized"
      status: 403
      message: "Insufficient permissions for this operation"

testing:
  unit_tests:
    - "Data validation"
    - "Permission checks"
    - "Error handling"

  integration_tests:
    - "CRUD operations"
    - "Role-based access"
    - "Email uniqueness"
    - "Self vs admin operations"

  security_tests:
    - "Permission boundaries"
    - "Data access controls"
    - "Input sanitization"

documentation:
  usage_examples:
    list_users: |
      ```typescript
      const response = await fetch('/users', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const { users } = await response.json();
      ```

    create_user: |
      ```typescript
      const response = await fetch('/users', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: 'New User',
          email: 'user@example.com',
          role: 'user'
        })
      });
      const { user } = await response.json();
      ```

monitoring:
  metrics:
    - "User creation rate"
    - "Failed operations count"
    - "Operation latency"
    - "Active users count"

  alerts:
    - condition: "High failure rate"
      threshold: "10% in 5 minutes"
      action: "Notify administrators"

    - condition: "Unusual deletion rate"
      threshold: "> 5 deletions/minute"
      action: "Trigger security review"

future_enhancements:
  - "Soft delete support"
  - "User profile images"
  - "Enhanced role system"
  - "Activity logging"
  - "Batch operations"
