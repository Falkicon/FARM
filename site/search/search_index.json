{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FARM Stack Documentation \u00b6 Welcome to the FARM Stack documentation. This documentation covers everything you need to know about using and contributing to the FARM Stack boilerplate. Quick Links \u00b6 Getting Started \u00b6 Installation Guide Development Guide Project Structure Architecture \u00b6 Architecture Overview Backend Architecture Frontend Architecture Shared Architecture Development \u00b6 Development Guidelines Testing Guide Specifications \u00b6 Project Specification System Specification Specification Tracking Core Documentation \u00b6 Contributing Guide License Changelog Project Status \u00b6 The FARM Stack is under active development. Check our Specification Tracking for the current status of features and components. Implemented Features \u2705 \u00b6 Project Structure Base Configuration Development Environment Documentation System Specification System Module Structure In Progress \ud83d\udd04 \u00b6 Component Documentation Development Guidelines Basic API Structure Coming Soon \u23f3 \u00b6 For upcoming features and enhancements, please refer to our Specification Tracking document. Support \u00b6 GitHub Issues Discord Community","title":"Home"},{"location":"#farm-stack-documentation","text":"Welcome to the FARM Stack documentation. This documentation covers everything you need to know about using and contributing to the FARM Stack boilerplate.","title":"FARM Stack Documentation"},{"location":"#quick-links","text":"","title":"Quick Links"},{"location":"#getting-started","text":"Installation Guide Development Guide Project Structure","title":"Getting Started"},{"location":"#architecture","text":"Architecture Overview Backend Architecture Frontend Architecture Shared Architecture","title":"Architecture"},{"location":"#development","text":"Development Guidelines Testing Guide","title":"Development"},{"location":"#specifications","text":"Project Specification System Specification Specification Tracking","title":"Specifications"},{"location":"#core-documentation","text":"Contributing Guide License Changelog","title":"Core Documentation"},{"location":"#project-status","text":"The FARM Stack is under active development. Check our Specification Tracking for the current status of features and components.","title":"Project Status"},{"location":"#implemented-features","text":"Project Structure Base Configuration Development Environment Documentation System Specification System Module Structure","title":"Implemented Features \u2705"},{"location":"#in-progress","text":"Component Documentation Development Guidelines Basic API Structure","title":"In Progress \ud83d\udd04"},{"location":"#coming-soon","text":"For upcoming features and enhancements, please refer to our Specification Tracking document.","title":"Coming Soon \u23f3"},{"location":"#support","text":"GitHub Issues Discord Community","title":"Support"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] \u00b6 Added \u00b6 Initial project structure Base configuration setup Development environment configuration Documentation system with MkDocs Specification system Module structure definition Core documentation Changed \u00b6 None Deprecated \u00b6 None Removed \u00b6 None Fixed \u00b6 None Security \u00b6 None [0.1.0] - 2023-12-13 \u00b6 Added \u00b6 Initial release Project scaffolding Basic documentation structure Core specifications Development environment setup Types of Changes \u00b6 Added for new features Changed for changes in existing functionality Deprecated for soon-to-be removed features Removed for now removed features Fixed for any bug fixes Security in case of vulnerabilities","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#added","text":"Initial project structure Base configuration setup Development environment configuration Documentation system with MkDocs Specification system Module structure definition Core documentation","title":"Added"},{"location":"changelog/#changed","text":"None","title":"Changed"},{"location":"changelog/#deprecated","text":"None","title":"Deprecated"},{"location":"changelog/#removed","text":"None","title":"Removed"},{"location":"changelog/#fixed","text":"None","title":"Fixed"},{"location":"changelog/#security","text":"None","title":"Security"},{"location":"changelog/#010-2023-12-13","text":"","title":"[0.1.0] - 2023-12-13"},{"location":"changelog/#added_1","text":"Initial release Project scaffolding Basic documentation structure Core specifications Development environment setup","title":"Added"},{"location":"changelog/#types-of-changes","text":"Added for new features Changed for changes in existing functionality Deprecated for soon-to-be removed features Removed for now removed features Fixed for any bug fixes Security in case of vulnerabilities","title":"Types of Changes"},{"location":"contributing/","text":"Contributing to FARM Stack \u00b6 We love your input! We want to make contributing to FARM Stack as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer Development Process \u00b6 We use GitHub to host code, to track issues and feature requests, as well as accept pull requests. Fork the repo and create your branch from develop If you've added code that should be tested, add tests If you've changed APIs, update the documentation Ensure the test suite passes Make sure your code lints Issue that pull request! Pull Request Process \u00b6 Update the README.md with details of changes to the interface, if applicable Update the docs/ with any new documentation or changes to existing docs The PR will be merged once you have the sign-off of two other developers If you haven't already, complete the Contributor License Agreement (\"CLA\") Any contributions you make will be under the MIT Software License \u00b6 In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern. Report bugs using GitHub's issue tracker \u00b6 We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Write bug reports with detail, background, and sample code \u00b6 Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code if you can What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) Use a Consistent Coding Style \u00b6 Use TypeScript for all code 2 spaces for indentation rather than tabs Run npm run lint to conform to our lint rules License \u00b6 By contributing, you agree that your contributions will be licensed under its MIT License.","title":"Contributing"},{"location":"contributing/#contributing-to-farm-stack","text":"We love your input! We want to make contributing to FARM Stack as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer","title":"Contributing to FARM Stack"},{"location":"contributing/#development-process","text":"We use GitHub to host code, to track issues and feature requests, as well as accept pull requests. Fork the repo and create your branch from develop If you've added code that should be tested, add tests If you've changed APIs, update the documentation Ensure the test suite passes Make sure your code lints Issue that pull request!","title":"Development Process"},{"location":"contributing/#pull-request-process","text":"Update the README.md with details of changes to the interface, if applicable Update the docs/ with any new documentation or changes to existing docs The PR will be merged once you have the sign-off of two other developers If you haven't already, complete the Contributor License Agreement (\"CLA\")","title":"Pull Request Process"},{"location":"contributing/#any-contributions-you-make-will-be-under-the-mit-software-license","text":"In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.","title":"Any contributions you make will be under the MIT Software License"},{"location":"contributing/#report-bugs-using-githubs-issue-tracker","text":"We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy!","title":"Report bugs using GitHub's issue tracker"},{"location":"contributing/#write-bug-reports-with-detail-background-and-sample-code","text":"Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code if you can What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)","title":"Write bug reports with detail, background, and sample code"},{"location":"contributing/#use-a-consistent-coding-style","text":"Use TypeScript for all code 2 spaces for indentation rather than tabs Run npm run lint to conform to our lint rules","title":"Use a Consistent Coding Style"},{"location":"contributing/#license","text":"By contributing, you agree that your contributions will be licensed under its MIT License.","title":"License"},{"location":"faq/","text":"FAQ \u00b6","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"license/","text":"MIT License \u00b6 Copyright (c) 2023 Falkicon Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Third-Party Licenses \u00b6 This project includes several third-party open source components: Lit \u00b6 License: BSD 3-Clause https://github.com/lit/lit/blob/main/LICENSE Fastify \u00b6 License: MIT https://github.com/fastify/fastify/blob/main/LICENSE Tailwind CSS \u00b6 License: MIT https://github.com/tailwindlabs/tailwindcss/blob/master/LICENSE TypeScript \u00b6 License: Apache 2.0 https://github.com/microsoft/TypeScript/blob/main/LICENSE.txt For full license texts of these components, please visit their respective repositories.","title":"License"},{"location":"license/#mit-license","text":"Copyright (c) 2023 Falkicon Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"license/#third-party-licenses","text":"This project includes several third-party open source components:","title":"Third-Party Licenses"},{"location":"license/#lit","text":"License: BSD 3-Clause https://github.com/lit/lit/blob/main/LICENSE","title":"Lit"},{"location":"license/#fastify","text":"License: MIT https://github.com/fastify/fastify/blob/main/LICENSE","title":"Fastify"},{"location":"license/#tailwind-css","text":"License: MIT https://github.com/tailwindlabs/tailwindcss/blob/master/LICENSE","title":"Tailwind CSS"},{"location":"license/#typescript","text":"License: Apache 2.0 https://github.com/microsoft/TypeScript/blob/main/LICENSE.txt For full license texts of these components, please visit their respective repositories.","title":"TypeScript"},{"location":"architecture/backend/","text":"Backend Architecture \u00b6 This document details the backend architecture of the FARM Stack boilerplate, focusing on API design, database integration, and server infrastructure. System Architecture \u00b6 graph TB subgraph \"API Layer\" Server[Fastify Server] Routes[Route Handlers] Plugins[Fastify Plugins] Server --> Routes Server --> Plugins end subgraph \"Business Logic\" Services[Services] Validation[Validation] Auth[Authentication] Routes --> Services Routes --> Validation Routes --> Auth end subgraph \"Data Layer\" Prisma[Prisma Client] MongoDB[MongoDB] Cache[Redis Cache] Services --> Prisma Prisma --> MongoDB Services --> Cache end subgraph \"Infrastructure\" Config[Configuration] Logger[Logging] Metrics[Metrics] Server --> Config Server --> Logger Server --> Metrics end API Architecture \u00b6 graph TB subgraph \"API Endpoints\" Health[Health Check] Auth[Authentication] Users[User Management] Files[File Operations] end subgraph \"Middleware\" Security[Security] Validation[Validation] Logging[Logging] Cache[Caching] end subgraph \"Response Handling\" Success[Success Handler] Error[Error Handler] Transform[Response Transform] end Security --> Health Security --> Auth Security --> Users Security --> Files Validation --> Security Logging --> Security Cache --> Security Health --> Success Auth --> Success Users --> Success Files --> Success Health --> Error Auth --> Error Users --> Error Files --> Error Success --> Transform Error --> Transform Database Architecture \u00b6 graph TB subgraph \"ORM Layer\" Prisma[Prisma Client] Schema[Schema Definition] Migration[Migrations] Seeding[Data Seeding] end subgraph \"Database\" Collections[Collections] Indexes[Indexes] Relations[Relations] end subgraph \"Caching\" Redis[Redis] Strategy[Cache Strategy] Invalidation[Cache Invalidation] end Prisma --> Schema Schema --> Migration Migration --> Collections Schema --> Indexes Schema --> Relations Prisma --> Redis Redis --> Strategy Strategy --> Invalidation Authentication Flow \u00b6 sequenceDiagram participant C as Client participant A as Auth Service participant D as Database participant T as Token Service participant R as Redis Cache C->>A: Login Request A->>D: Validate Credentials D->>A: User Data A->>T: Generate Tokens T->>R: Store Refresh Token T->>A: Return Tokens A->>C: Auth Response Request Processing \u00b6 graph LR subgraph \"Request Pipeline\" Request[Request] Parse[Parse] Validate[Validate] Auth[Authenticate] Handle[Handle] Format[Format] Response[Response] end Request --> Parse Parse --> Validate Validate --> Auth Auth --> Handle Handle --> Format Format --> Response Error Handling \u00b6 graph TB subgraph \"Error Types\" Validation[Validation Error] Auth[Auth Error] NotFound[Not Found] Server[Server Error] end subgraph \"Error Processing\" Catch[Error Catch] Log[Error Log] Format[Error Format] Response[Error Response] end Validation --> Catch Auth --> Catch NotFound --> Catch Server --> Catch Catch --> Log Log --> Format Format --> Response Key Features \u00b6 1. API Framework \u00b6 Fastify server Plugin architecture Type-safe routes OpenAPI integration 2. Database Integration \u00b6 Prisma ORM MongoDB connection Migration system Query optimization 3. Security \u00b6 JWT authentication Role-based access Request validation Security headers 4. Performance \u00b6 Response caching Connection pooling Query optimization Load balancing Infrastructure Components \u00b6 1. Server Configuration \u00b6 graph TB subgraph \"Configuration\" Env[Environment] Config[App Config] Plugin[Plugin Config] Route[Route Config] end subgraph \"Initialization\" Load[Load Config] Validate[Validate] Apply[Apply Config] end Env --> Load Config --> Load Plugin --> Load Route --> Load Load --> Validate Validate --> Apply 2. Logging System \u00b6 graph TB subgraph \"Log Types\" Access[Access Logs] Error[Error Logs] Audit[Audit Logs] Debug[Debug Logs] end subgraph \"Log Processing\" Format[Format Logs] Filter[Filter Logs] Store[Store Logs] end Access --> Format Error --> Format Audit --> Format Debug --> Format Format --> Filter Filter --> Store 3. Monitoring \u00b6 graph TB subgraph \"Metrics\" Request[Request Metrics] System[System Metrics] Business[Business Metrics] end subgraph \"Monitoring\" Collect[Collect] Process[Process] Alert[Alert] Dashboard[Dashboard] end Request --> Collect System --> Collect Business --> Collect Collect --> Process Process --> Alert Process --> Dashboard Development Tools \u00b6 1. Testing \u00b6 Unit testing setup Integration testing API testing Performance testing 2. Documentation \u00b6 OpenAPI documentation API documentation Database schema docs Development guides 3. Development \u00b6 Hot reloading Debug configuration Development database Local environment Best Practices \u00b6 1. API Design \u00b6 RESTful principles Resource naming Status codes Error handling 2. Security \u00b6 Input validation Output sanitization Rate limiting Security headers 3. Performance \u00b6 Query optimization Caching strategy Connection management Resource pooling Next Steps \u00b6 API Guidelines Database Guide Security Guide","title":"Implementation"},{"location":"architecture/backend/#backend-architecture","text":"This document details the backend architecture of the FARM Stack boilerplate, focusing on API design, database integration, and server infrastructure.","title":"Backend Architecture"},{"location":"architecture/backend/#system-architecture","text":"graph TB subgraph \"API Layer\" Server[Fastify Server] Routes[Route Handlers] Plugins[Fastify Plugins] Server --> Routes Server --> Plugins end subgraph \"Business Logic\" Services[Services] Validation[Validation] Auth[Authentication] Routes --> Services Routes --> Validation Routes --> Auth end subgraph \"Data Layer\" Prisma[Prisma Client] MongoDB[MongoDB] Cache[Redis Cache] Services --> Prisma Prisma --> MongoDB Services --> Cache end subgraph \"Infrastructure\" Config[Configuration] Logger[Logging] Metrics[Metrics] Server --> Config Server --> Logger Server --> Metrics end","title":"System Architecture"},{"location":"architecture/backend/#api-architecture","text":"graph TB subgraph \"API Endpoints\" Health[Health Check] Auth[Authentication] Users[User Management] Files[File Operations] end subgraph \"Middleware\" Security[Security] Validation[Validation] Logging[Logging] Cache[Caching] end subgraph \"Response Handling\" Success[Success Handler] Error[Error Handler] Transform[Response Transform] end Security --> Health Security --> Auth Security --> Users Security --> Files Validation --> Security Logging --> Security Cache --> Security Health --> Success Auth --> Success Users --> Success Files --> Success Health --> Error Auth --> Error Users --> Error Files --> Error Success --> Transform Error --> Transform","title":"API Architecture"},{"location":"architecture/backend/#database-architecture","text":"graph TB subgraph \"ORM Layer\" Prisma[Prisma Client] Schema[Schema Definition] Migration[Migrations] Seeding[Data Seeding] end subgraph \"Database\" Collections[Collections] Indexes[Indexes] Relations[Relations] end subgraph \"Caching\" Redis[Redis] Strategy[Cache Strategy] Invalidation[Cache Invalidation] end Prisma --> Schema Schema --> Migration Migration --> Collections Schema --> Indexes Schema --> Relations Prisma --> Redis Redis --> Strategy Strategy --> Invalidation","title":"Database Architecture"},{"location":"architecture/backend/#authentication-flow","text":"sequenceDiagram participant C as Client participant A as Auth Service participant D as Database participant T as Token Service participant R as Redis Cache C->>A: Login Request A->>D: Validate Credentials D->>A: User Data A->>T: Generate Tokens T->>R: Store Refresh Token T->>A: Return Tokens A->>C: Auth Response","title":"Authentication Flow"},{"location":"architecture/backend/#request-processing","text":"graph LR subgraph \"Request Pipeline\" Request[Request] Parse[Parse] Validate[Validate] Auth[Authenticate] Handle[Handle] Format[Format] Response[Response] end Request --> Parse Parse --> Validate Validate --> Auth Auth --> Handle Handle --> Format Format --> Response","title":"Request Processing"},{"location":"architecture/backend/#error-handling","text":"graph TB subgraph \"Error Types\" Validation[Validation Error] Auth[Auth Error] NotFound[Not Found] Server[Server Error] end subgraph \"Error Processing\" Catch[Error Catch] Log[Error Log] Format[Error Format] Response[Error Response] end Validation --> Catch Auth --> Catch NotFound --> Catch Server --> Catch Catch --> Log Log --> Format Format --> Response","title":"Error Handling"},{"location":"architecture/backend/#key-features","text":"","title":"Key Features"},{"location":"architecture/backend/#1-api-framework","text":"Fastify server Plugin architecture Type-safe routes OpenAPI integration","title":"1. API Framework"},{"location":"architecture/backend/#2-database-integration","text":"Prisma ORM MongoDB connection Migration system Query optimization","title":"2. Database Integration"},{"location":"architecture/backend/#3-security","text":"JWT authentication Role-based access Request validation Security headers","title":"3. Security"},{"location":"architecture/backend/#4-performance","text":"Response caching Connection pooling Query optimization Load balancing","title":"4. Performance"},{"location":"architecture/backend/#infrastructure-components","text":"","title":"Infrastructure Components"},{"location":"architecture/backend/#1-server-configuration","text":"graph TB subgraph \"Configuration\" Env[Environment] Config[App Config] Plugin[Plugin Config] Route[Route Config] end subgraph \"Initialization\" Load[Load Config] Validate[Validate] Apply[Apply Config] end Env --> Load Config --> Load Plugin --> Load Route --> Load Load --> Validate Validate --> Apply","title":"1. Server Configuration"},{"location":"architecture/backend/#2-logging-system","text":"graph TB subgraph \"Log Types\" Access[Access Logs] Error[Error Logs] Audit[Audit Logs] Debug[Debug Logs] end subgraph \"Log Processing\" Format[Format Logs] Filter[Filter Logs] Store[Store Logs] end Access --> Format Error --> Format Audit --> Format Debug --> Format Format --> Filter Filter --> Store","title":"2. Logging System"},{"location":"architecture/backend/#3-monitoring","text":"graph TB subgraph \"Metrics\" Request[Request Metrics] System[System Metrics] Business[Business Metrics] end subgraph \"Monitoring\" Collect[Collect] Process[Process] Alert[Alert] Dashboard[Dashboard] end Request --> Collect System --> Collect Business --> Collect Collect --> Process Process --> Alert Process --> Dashboard","title":"3. Monitoring"},{"location":"architecture/backend/#development-tools","text":"","title":"Development Tools"},{"location":"architecture/backend/#1-testing","text":"Unit testing setup Integration testing API testing Performance testing","title":"1. Testing"},{"location":"architecture/backend/#2-documentation","text":"OpenAPI documentation API documentation Database schema docs Development guides","title":"2. Documentation"},{"location":"architecture/backend/#3-development","text":"Hot reloading Debug configuration Development database Local environment","title":"3. Development"},{"location":"architecture/backend/#best-practices","text":"","title":"Best Practices"},{"location":"architecture/backend/#1-api-design","text":"RESTful principles Resource naming Status codes Error handling","title":"1. API Design"},{"location":"architecture/backend/#2-security","text":"Input validation Output sanitization Rate limiting Security headers","title":"2. Security"},{"location":"architecture/backend/#3-performance","text":"Query optimization Caching strategy Connection management Resource pooling","title":"3. Performance"},{"location":"architecture/backend/#next-steps","text":"API Guidelines Database Guide Security Guide","title":"Next Steps"},{"location":"architecture/frontend/","text":"Frontend Architecture \u00b6 This document details the frontend architecture of the FARM Stack boilerplate, focusing on component structure, state management, and data flow. Component Architecture \u00b6 graph TB subgraph \"App Shell\" Shell[App Shell Component] Router[Router Integration] State[State Container] Shell --> Router Shell --> State end subgraph \"Core Components\" Nav[Navigation] Forms[Form System] Cards[Card System] Shell --> Nav Shell --> Forms Shell --> Cards end subgraph \"Feature Components\" Auth[Auth Components] User[User Components] File[File Components] Nav --> Auth Forms --> User Cards --> File end subgraph \"Shared Components\" Button[Buttons] Input[Inputs] Modal[Modals] Toast[Toasts] Forms --> Button Forms --> Input Auth --> Modal User --> Toast end Component Hierarchy \u00b6 graph TB subgraph \"Layout\" AppShell[App Shell] Header[Header] Main[Main Content] Footer[Footer] AppShell --> Header AppShell --> Main AppShell --> Footer end subgraph \"Navigation\" MainNav[Main Navigation] SubNav[Sub Navigation] Breadcrumb[Breadcrumbs] Header --> MainNav Main --> SubNav Main --> Breadcrumb end subgraph \"Content\" Forms[Forms] Lists[Lists] Cards[Cards] Modals[Modals] Main --> Forms Main --> Lists Main --> Cards Main --> Modals end subgraph \"Feedback\" Toast[Toasts] Alert[Alerts] Progress[Progress] Loading[Loading] AppShell --> Toast AppShell --> Alert Main --> Progress Main --> Loading end State Management \u00b6 graph LR subgraph \"State Types\" App[App State] Route[Route State] Auth[Auth State] UI[UI State] end subgraph \"State Flow\" Store[State Store] Action[Actions] Effect[Effects] Component[Components] end Component --> Action Action --> Store Store --> Effect Effect --> Component App --> Store Route --> Store Auth --> Store UI --> Store Routing Architecture \u00b6 graph TB subgraph \"Router\" Routes[Route Definitions] Guards[Route Guards] Params[Route Parameters] end subgraph \"Navigation\" History[History API] Links[Router Links] Events[Navigation Events] end subgraph \"Views\" Load[Route Loading] Error[Error Handling] NotFound[404 Handler] end Routes --> Guards Guards --> Load Load --> Error Load --> NotFound History --> Routes Links --> History Events --> History Data Flow \u00b6 sequenceDiagram participant U as User participant C as Component participant S as State participant A as API participant R as Router U->>C: User Action C->>S: Dispatch Action S->>A: API Request A->>S: Response S->>C: State Update C->>U: UI Update C->>R: Route Change R->>C: View Update Component Communication \u00b6 graph TB subgraph \"Parent to Child\" Props[Properties] Attrs[Attributes] Slots[Slot Content] end subgraph \"Child to Parent\" Events[Custom Events] Methods[Public Methods] Props2[Property Changes] end subgraph \"Cross-Component\" Store[State Store] PubSub[Event Bus] Context[Context API] end Props --> Child1[Child Component] Attrs --> Child1 Slots --> Child1 Child2[Child Component] --> Events Child2 --> Methods Child2 --> Props2 Store --> Components[Components] Components --> Store PubSub --> Components Components --> PubSub Context --> Components Component Lifecycle \u00b6 graph TB subgraph \"Creation\" Constructor[Constructor] Props[Properties] State[State Setup] end subgraph \"Mounting\" Connect[Connected] First[First Update] Render[First Render] end subgraph \"Updates\" Props2[Props Change] State2[State Change] Update[Update Cycle] end subgraph \"Cleanup\" Disconnect[Disconnected] Destroy[Cleanup] end Constructor --> Props Props --> State State --> Connect Connect --> First First --> Render Props2 --> Update State2 --> Update Update --> Render Disconnect --> Destroy Key Features \u00b6 1. Component System \u00b6 Web Components using Lit Shadow DOM encapsulation Custom element definitions Property/attribute reflection 2. State Management \u00b6 Reactive properties State containers Action dispatching Effect handling 3. Routing \u00b6 Universal Router integration Type-safe routes Guard support History management 4. Performance \u00b6 Code splitting Lazy loading Virtual DOM Efficient updates Development Tools \u00b6 1. Build System \u00b6 Vite configuration TypeScript compilation Asset optimization Development server 2. Testing \u00b6 Unit testing setup Component testing Integration testing E2E testing 3. Documentation \u00b6 Storybook integration Component documentation API documentation Usage examples Best Practices \u00b6 1. Component Design \u00b6 Single responsibility Encapsulation Reusability Accessibility 2. State Management \u00b6 Immutable updates Action creators Side effect handling State normalization 3. Performance \u00b6 Lazy loading Memoization Event delegation Resource optimization Next Steps \u00b6 Component Guidelines State Management Guide Routing Guide","title":"Implementation"},{"location":"architecture/frontend/#frontend-architecture","text":"This document details the frontend architecture of the FARM Stack boilerplate, focusing on component structure, state management, and data flow.","title":"Frontend Architecture"},{"location":"architecture/frontend/#component-architecture","text":"graph TB subgraph \"App Shell\" Shell[App Shell Component] Router[Router Integration] State[State Container] Shell --> Router Shell --> State end subgraph \"Core Components\" Nav[Navigation] Forms[Form System] Cards[Card System] Shell --> Nav Shell --> Forms Shell --> Cards end subgraph \"Feature Components\" Auth[Auth Components] User[User Components] File[File Components] Nav --> Auth Forms --> User Cards --> File end subgraph \"Shared Components\" Button[Buttons] Input[Inputs] Modal[Modals] Toast[Toasts] Forms --> Button Forms --> Input Auth --> Modal User --> Toast end","title":"Component Architecture"},{"location":"architecture/frontend/#component-hierarchy","text":"graph TB subgraph \"Layout\" AppShell[App Shell] Header[Header] Main[Main Content] Footer[Footer] AppShell --> Header AppShell --> Main AppShell --> Footer end subgraph \"Navigation\" MainNav[Main Navigation] SubNav[Sub Navigation] Breadcrumb[Breadcrumbs] Header --> MainNav Main --> SubNav Main --> Breadcrumb end subgraph \"Content\" Forms[Forms] Lists[Lists] Cards[Cards] Modals[Modals] Main --> Forms Main --> Lists Main --> Cards Main --> Modals end subgraph \"Feedback\" Toast[Toasts] Alert[Alerts] Progress[Progress] Loading[Loading] AppShell --> Toast AppShell --> Alert Main --> Progress Main --> Loading end","title":"Component Hierarchy"},{"location":"architecture/frontend/#state-management","text":"graph LR subgraph \"State Types\" App[App State] Route[Route State] Auth[Auth State] UI[UI State] end subgraph \"State Flow\" Store[State Store] Action[Actions] Effect[Effects] Component[Components] end Component --> Action Action --> Store Store --> Effect Effect --> Component App --> Store Route --> Store Auth --> Store UI --> Store","title":"State Management"},{"location":"architecture/frontend/#routing-architecture","text":"graph TB subgraph \"Router\" Routes[Route Definitions] Guards[Route Guards] Params[Route Parameters] end subgraph \"Navigation\" History[History API] Links[Router Links] Events[Navigation Events] end subgraph \"Views\" Load[Route Loading] Error[Error Handling] NotFound[404 Handler] end Routes --> Guards Guards --> Load Load --> Error Load --> NotFound History --> Routes Links --> History Events --> History","title":"Routing Architecture"},{"location":"architecture/frontend/#data-flow","text":"sequenceDiagram participant U as User participant C as Component participant S as State participant A as API participant R as Router U->>C: User Action C->>S: Dispatch Action S->>A: API Request A->>S: Response S->>C: State Update C->>U: UI Update C->>R: Route Change R->>C: View Update","title":"Data Flow"},{"location":"architecture/frontend/#component-communication","text":"graph TB subgraph \"Parent to Child\" Props[Properties] Attrs[Attributes] Slots[Slot Content] end subgraph \"Child to Parent\" Events[Custom Events] Methods[Public Methods] Props2[Property Changes] end subgraph \"Cross-Component\" Store[State Store] PubSub[Event Bus] Context[Context API] end Props --> Child1[Child Component] Attrs --> Child1 Slots --> Child1 Child2[Child Component] --> Events Child2 --> Methods Child2 --> Props2 Store --> Components[Components] Components --> Store PubSub --> Components Components --> PubSub Context --> Components","title":"Component Communication"},{"location":"architecture/frontend/#component-lifecycle","text":"graph TB subgraph \"Creation\" Constructor[Constructor] Props[Properties] State[State Setup] end subgraph \"Mounting\" Connect[Connected] First[First Update] Render[First Render] end subgraph \"Updates\" Props2[Props Change] State2[State Change] Update[Update Cycle] end subgraph \"Cleanup\" Disconnect[Disconnected] Destroy[Cleanup] end Constructor --> Props Props --> State State --> Connect Connect --> First First --> Render Props2 --> Update State2 --> Update Update --> Render Disconnect --> Destroy","title":"Component Lifecycle"},{"location":"architecture/frontend/#key-features","text":"","title":"Key Features"},{"location":"architecture/frontend/#1-component-system","text":"Web Components using Lit Shadow DOM encapsulation Custom element definitions Property/attribute reflection","title":"1. Component System"},{"location":"architecture/frontend/#2-state-management","text":"Reactive properties State containers Action dispatching Effect handling","title":"2. State Management"},{"location":"architecture/frontend/#3-routing","text":"Universal Router integration Type-safe routes Guard support History management","title":"3. Routing"},{"location":"architecture/frontend/#4-performance","text":"Code splitting Lazy loading Virtual DOM Efficient updates","title":"4. Performance"},{"location":"architecture/frontend/#development-tools","text":"","title":"Development Tools"},{"location":"architecture/frontend/#1-build-system","text":"Vite configuration TypeScript compilation Asset optimization Development server","title":"1. Build System"},{"location":"architecture/frontend/#2-testing","text":"Unit testing setup Component testing Integration testing E2E testing","title":"2. Testing"},{"location":"architecture/frontend/#3-documentation","text":"Storybook integration Component documentation API documentation Usage examples","title":"3. Documentation"},{"location":"architecture/frontend/#best-practices","text":"","title":"Best Practices"},{"location":"architecture/frontend/#1-component-design","text":"Single responsibility Encapsulation Reusability Accessibility","title":"1. Component Design"},{"location":"architecture/frontend/#2-state-management_1","text":"Immutable updates Action creators Side effect handling State normalization","title":"2. State Management"},{"location":"architecture/frontend/#3-performance","text":"Lazy loading Memoization Event delegation Resource optimization","title":"3. Performance"},{"location":"architecture/frontend/#next-steps","text":"Component Guidelines State Management Guide Routing Guide","title":"Next Steps"},{"location":"architecture/overview/","text":"Architecture Overview \u00b6 System Architecture \u00b6 The Farm project follows a modern web application architecture with the following key components: graph TB Client[Client Browser] --> Frontend[Frontend Application] Frontend --> Backend[Backend API] Backend --> Database[MongoDB] Backend --> Cache[Redis Cache] Backend --> Storage[File Storage] Frontend Architecture \u00b6 The frontend is built using Lit and follows these architectural principles: Component-Based : Modular, reusable UI components State Management : Centralized state using stores Routing : Client-side routing with history API Styling : CSS-in-JS with Tailwind CSS Backend Architecture \u00b6 The backend uses Fastify and follows these patterns: RESTful API : HTTP-based API endpoints Middleware : Request processing pipeline Services : Business logic encapsulation Models : Data structure definitions Data Flow \u00b6 sequenceDiagram participant Client participant Frontend participant Backend participant Database Client->>Frontend: User Action Frontend->>Backend: API Request Backend->>Database: Query Data Database-->>Backend: Return Data Backend-->>Frontend: API Response Frontend-->>Client: Update UI Key Technologies \u00b6 Frontend Stack \u00b6 Framework : Lit State Management : Custom stores Routing : Universal Router Styling : Tailwind CSS Build Tool : Vite Backend Stack \u00b6 Framework : Fastify Database : MongoDB Cache : Redis File Storage : Local/S3 Authentication : JWT Development Tools \u00b6 Language : TypeScript Testing : Vitest, Playwright Documentation : TypeDoc, MkDocs CI/CD : GitHub Actions Design Patterns \u00b6 Frontend Patterns \u00b6 Component Composition Container/Presentational Pattern Observer Pattern (for state) Strategy Pattern (for features) Backend Patterns \u00b6 Repository Pattern Service Layer Pattern Factory Pattern Dependency Injection Security Architecture \u00b6 Authentication Flow \u00b6 sequenceDiagram participant User participant Frontend participant Backend participant JWT User->>Frontend: Login Request Frontend->>Backend: Auth Request Backend->>JWT: Generate Token JWT-->>Backend: Token Backend-->>Frontend: Auth Response Frontend-->>User: Login Success Security Measures \u00b6 JWT Authentication CORS Protection XSS Prevention CSRF Protection Rate Limiting Input Validation Performance Optimization \u00b6 Frontend Performance \u00b6 Code Splitting Lazy Loading Asset Optimization Cache Management Performance Monitoring Backend Performance \u00b6 Database Indexing Query Optimization Caching Strategy Load Balancing Resource Pooling Deployment Architecture \u00b6 graph LR Dev[Development] --> Staging[Staging] Staging --> Production[Production] subgraph Development DevEnv[Local Environment] end subgraph Staging StagingEnv[Staging Environment] end subgraph Production LoadBalancer[Load Balancer] Server1[Server 1] Server2[Server 2] Database[(Database)] Cache[(Cache)] LoadBalancer --> Server1 LoadBalancer --> Server2 Server1 --> Database Server2 --> Database Server1 --> Cache Server2 --> Cache end","title":"Overview"},{"location":"architecture/overview/#architecture-overview","text":"","title":"Architecture Overview"},{"location":"architecture/overview/#system-architecture","text":"The Farm project follows a modern web application architecture with the following key components: graph TB Client[Client Browser] --> Frontend[Frontend Application] Frontend --> Backend[Backend API] Backend --> Database[MongoDB] Backend --> Cache[Redis Cache] Backend --> Storage[File Storage]","title":"System Architecture"},{"location":"architecture/overview/#frontend-architecture","text":"The frontend is built using Lit and follows these architectural principles: Component-Based : Modular, reusable UI components State Management : Centralized state using stores Routing : Client-side routing with history API Styling : CSS-in-JS with Tailwind CSS","title":"Frontend Architecture"},{"location":"architecture/overview/#backend-architecture","text":"The backend uses Fastify and follows these patterns: RESTful API : HTTP-based API endpoints Middleware : Request processing pipeline Services : Business logic encapsulation Models : Data structure definitions","title":"Backend Architecture"},{"location":"architecture/overview/#data-flow","text":"sequenceDiagram participant Client participant Frontend participant Backend participant Database Client->>Frontend: User Action Frontend->>Backend: API Request Backend->>Database: Query Data Database-->>Backend: Return Data Backend-->>Frontend: API Response Frontend-->>Client: Update UI","title":"Data Flow"},{"location":"architecture/overview/#key-technologies","text":"","title":"Key Technologies"},{"location":"architecture/overview/#frontend-stack","text":"Framework : Lit State Management : Custom stores Routing : Universal Router Styling : Tailwind CSS Build Tool : Vite","title":"Frontend Stack"},{"location":"architecture/overview/#backend-stack","text":"Framework : Fastify Database : MongoDB Cache : Redis File Storage : Local/S3 Authentication : JWT","title":"Backend Stack"},{"location":"architecture/overview/#development-tools","text":"Language : TypeScript Testing : Vitest, Playwright Documentation : TypeDoc, MkDocs CI/CD : GitHub Actions","title":"Development Tools"},{"location":"architecture/overview/#design-patterns","text":"","title":"Design Patterns"},{"location":"architecture/overview/#frontend-patterns","text":"Component Composition Container/Presentational Pattern Observer Pattern (for state) Strategy Pattern (for features)","title":"Frontend Patterns"},{"location":"architecture/overview/#backend-patterns","text":"Repository Pattern Service Layer Pattern Factory Pattern Dependency Injection","title":"Backend Patterns"},{"location":"architecture/overview/#security-architecture","text":"","title":"Security Architecture"},{"location":"architecture/overview/#authentication-flow","text":"sequenceDiagram participant User participant Frontend participant Backend participant JWT User->>Frontend: Login Request Frontend->>Backend: Auth Request Backend->>JWT: Generate Token JWT-->>Backend: Token Backend-->>Frontend: Auth Response Frontend-->>User: Login Success","title":"Authentication Flow"},{"location":"architecture/overview/#security-measures","text":"JWT Authentication CORS Protection XSS Prevention CSRF Protection Rate Limiting Input Validation","title":"Security Measures"},{"location":"architecture/overview/#performance-optimization","text":"","title":"Performance Optimization"},{"location":"architecture/overview/#frontend-performance","text":"Code Splitting Lazy Loading Asset Optimization Cache Management Performance Monitoring","title":"Frontend Performance"},{"location":"architecture/overview/#backend-performance","text":"Database Indexing Query Optimization Caching Strategy Load Balancing Resource Pooling","title":"Backend Performance"},{"location":"architecture/overview/#deployment-architecture","text":"graph LR Dev[Development] --> Staging[Staging] Staging --> Production[Production] subgraph Development DevEnv[Local Environment] end subgraph Staging StagingEnv[Staging Environment] end subgraph Production LoadBalancer[Load Balancer] Server1[Server 1] Server2[Server 2] Database[(Database)] Cache[(Cache)] LoadBalancer --> Server1 LoadBalancer --> Server2 Server1 --> Database Server2 --> Database Server1 --> Cache Server2 --> Cache end","title":"Deployment Architecture"},{"location":"architecture/shared/","text":"Shared Architecture \u00b6 This document details the shared architecture components of the FARM Stack boilerplate, focusing on types, utilities, and constants that are used across both frontend and backend. Type System Architecture \u00b6 graph TB subgraph \"Type Categories\" Models[Data Models] API[API Types] Utils[Utility Types] end subgraph \"Model Types\" User[User Types] Auth[Auth Types] File[File Types] Models --> User Models --> Auth Models --> File end subgraph \"API Types\" Request[Request Types] Response[Response Types] Error[Error Types] API --> Request API --> Response API --> Error end subgraph \"Utility Types\" Generic[Generic Types] Helper[Helper Types] Guard[Type Guards] Utils --> Generic Utils --> Helper Utils --> Guard end Utility Architecture \u00b6 graph TB subgraph \"Utility Categories\" Date[Date Utils] String[String Utils] Validation[Validation Utils] Object[Object Utils] end subgraph \"Implementation\" Pure[Pure Functions] Wrapper[Library Wrappers] Custom[Custom Logic] end subgraph \"Usage\" Frontend[Frontend Usage] Backend[Backend Usage] Tests[Test Usage] end Date --> Pure String --> Pure Validation --> Custom Object --> Wrapper Pure --> Frontend Pure --> Backend Pure --> Tests Custom --> Frontend Custom --> Backend Custom --> Tests Wrapper --> Frontend Wrapper --> Backend Wrapper --> Tests Constants Architecture \u00b6 graph TB subgraph \"Configuration\" Env[Environment] App[Application] API[API Config] end subgraph \"Feature Flags\" UI[UI Features] Server[Server Features] System[System Features] end subgraph \"Constants\" Routes[Route Constants] Messages[Message Constants] Defaults[Default Values] end Env --> App App --> API UI --> App Server --> API System --> Env Routes --> API Messages --> UI Defaults --> System Validation System \u00b6 graph TB subgraph \"Schema Definition\" Types[Type Definitions] Rules[Validation Rules] Messages[Error Messages] end subgraph \"Validation Logic\" Runtime[Runtime Checks] Static[Static Analysis] Custom[Custom Validators] end subgraph \"Implementation\" Frontend[Frontend Validation] Backend[Backend Validation] Shared[Shared Validation] end Types --> Runtime Rules --> Runtime Messages --> Runtime Types --> Static Rules --> Static Runtime --> Frontend Runtime --> Backend Static --> Shared Custom --> Shared Error Handling \u00b6 graph TB subgraph \"Error Types\" App[Application Errors] Domain[Domain Errors] System[System Errors] end subgraph \"Error Processing\" Create[Error Creation] Format[Error Formatting] Handle[Error Handling] end subgraph \"Usage\" FrontendUse[Frontend Usage] BackendUse[Backend Usage] LoggingUse[Logging Usage] end App --> Create Domain --> Create System --> Create Create --> Format Format --> Handle Handle --> FrontendUse Handle --> BackendUse Handle --> LoggingUse Key Features \u00b6 1. Type System \u00b6 Shared type definitions Runtime type validation Type guards and assertions Generic type utilities 2. Utilities \u00b6 Pure utility functions Common operations Shared helpers Performance optimized 3. Constants \u00b6 Environment configuration Feature flags Shared constants Default values 4. Validation \u00b6 Schema validation Runtime checks Error messages Custom validators Implementation Details \u00b6 1. Type Definitions \u00b6 // Example type definitions export interface User { id : string ; email : string ; role : UserRole ; } export type UserRole = 'admin' | 'user' ; export interface ApiResponse < T > { success : boolean ; data? : T ; error? : string ; } 2. Utility Functions \u00b6 // Example utility functions export const formatDate = ( date : Date ) : string => { // Implementation }; export const validateEmail = ( email : string ) : boolean => { // Implementation }; export const deepClone = < T > ( obj : T ) : T => { // Implementation }; 3. Constants \u00b6 // Example constants export const API_ROUTES = { AUTH : '/api/auth' , USERS : '/api/users' , FILES : '/api/files' , } as const ; export const DEFAULT_PAGINATION = { PAGE : 1 , SIZE : 20 , } as const ; Best Practices \u00b6 1. Type Safety \u00b6 Use strict type checking Avoid type assertions Document complex types Use type guards 2. Code Organization \u00b6 Group by domain Clear file structure Consistent naming Proper exports 3. Performance \u00b6 Optimize imports Minimize dependencies Use pure functions Cache results 4. Maintenance \u00b6 Clear documentation Version control Breaking changes Migration guides Development Workflow \u00b6 1. Type Development \u00b6 graph LR Define[Define Types] Review[Review Types] Test[Test Types] Document[Document Types] Deploy[Deploy Types] Define --> Review Review --> Test Test --> Document Document --> Deploy 2. Utility Development \u00b6 graph LR Design[Design API] Implement[Implement] Test[Test] Document[Document] Release[Release] Design --> Implement Implement --> Test Test --> Document Document --> Release 3. Constant Management \u00b6 graph LR Define[Define Constants] Review[Review Usage] Update[Update Values] Deploy[Deploy Changes] Define --> Review Review --> Update Update --> Deploy Next Steps \u00b6 Type System Guide Utility Guide Constants Guide","title":"Implementation"},{"location":"architecture/shared/#shared-architecture","text":"This document details the shared architecture components of the FARM Stack boilerplate, focusing on types, utilities, and constants that are used across both frontend and backend.","title":"Shared Architecture"},{"location":"architecture/shared/#type-system-architecture","text":"graph TB subgraph \"Type Categories\" Models[Data Models] API[API Types] Utils[Utility Types] end subgraph \"Model Types\" User[User Types] Auth[Auth Types] File[File Types] Models --> User Models --> Auth Models --> File end subgraph \"API Types\" Request[Request Types] Response[Response Types] Error[Error Types] API --> Request API --> Response API --> Error end subgraph \"Utility Types\" Generic[Generic Types] Helper[Helper Types] Guard[Type Guards] Utils --> Generic Utils --> Helper Utils --> Guard end","title":"Type System Architecture"},{"location":"architecture/shared/#utility-architecture","text":"graph TB subgraph \"Utility Categories\" Date[Date Utils] String[String Utils] Validation[Validation Utils] Object[Object Utils] end subgraph \"Implementation\" Pure[Pure Functions] Wrapper[Library Wrappers] Custom[Custom Logic] end subgraph \"Usage\" Frontend[Frontend Usage] Backend[Backend Usage] Tests[Test Usage] end Date --> Pure String --> Pure Validation --> Custom Object --> Wrapper Pure --> Frontend Pure --> Backend Pure --> Tests Custom --> Frontend Custom --> Backend Custom --> Tests Wrapper --> Frontend Wrapper --> Backend Wrapper --> Tests","title":"Utility Architecture"},{"location":"architecture/shared/#constants-architecture","text":"graph TB subgraph \"Configuration\" Env[Environment] App[Application] API[API Config] end subgraph \"Feature Flags\" UI[UI Features] Server[Server Features] System[System Features] end subgraph \"Constants\" Routes[Route Constants] Messages[Message Constants] Defaults[Default Values] end Env --> App App --> API UI --> App Server --> API System --> Env Routes --> API Messages --> UI Defaults --> System","title":"Constants Architecture"},{"location":"architecture/shared/#validation-system","text":"graph TB subgraph \"Schema Definition\" Types[Type Definitions] Rules[Validation Rules] Messages[Error Messages] end subgraph \"Validation Logic\" Runtime[Runtime Checks] Static[Static Analysis] Custom[Custom Validators] end subgraph \"Implementation\" Frontend[Frontend Validation] Backend[Backend Validation] Shared[Shared Validation] end Types --> Runtime Rules --> Runtime Messages --> Runtime Types --> Static Rules --> Static Runtime --> Frontend Runtime --> Backend Static --> Shared Custom --> Shared","title":"Validation System"},{"location":"architecture/shared/#error-handling","text":"graph TB subgraph \"Error Types\" App[Application Errors] Domain[Domain Errors] System[System Errors] end subgraph \"Error Processing\" Create[Error Creation] Format[Error Formatting] Handle[Error Handling] end subgraph \"Usage\" FrontendUse[Frontend Usage] BackendUse[Backend Usage] LoggingUse[Logging Usage] end App --> Create Domain --> Create System --> Create Create --> Format Format --> Handle Handle --> FrontendUse Handle --> BackendUse Handle --> LoggingUse","title":"Error Handling"},{"location":"architecture/shared/#key-features","text":"","title":"Key Features"},{"location":"architecture/shared/#1-type-system","text":"Shared type definitions Runtime type validation Type guards and assertions Generic type utilities","title":"1. Type System"},{"location":"architecture/shared/#2-utilities","text":"Pure utility functions Common operations Shared helpers Performance optimized","title":"2. Utilities"},{"location":"architecture/shared/#3-constants","text":"Environment configuration Feature flags Shared constants Default values","title":"3. Constants"},{"location":"architecture/shared/#4-validation","text":"Schema validation Runtime checks Error messages Custom validators","title":"4. Validation"},{"location":"architecture/shared/#implementation-details","text":"","title":"Implementation Details"},{"location":"architecture/shared/#1-type-definitions","text":"// Example type definitions export interface User { id : string ; email : string ; role : UserRole ; } export type UserRole = 'admin' | 'user' ; export interface ApiResponse < T > { success : boolean ; data? : T ; error? : string ; }","title":"1. Type Definitions"},{"location":"architecture/shared/#2-utility-functions","text":"// Example utility functions export const formatDate = ( date : Date ) : string => { // Implementation }; export const validateEmail = ( email : string ) : boolean => { // Implementation }; export const deepClone = < T > ( obj : T ) : T => { // Implementation };","title":"2. Utility Functions"},{"location":"architecture/shared/#3-constants_1","text":"// Example constants export const API_ROUTES = { AUTH : '/api/auth' , USERS : '/api/users' , FILES : '/api/files' , } as const ; export const DEFAULT_PAGINATION = { PAGE : 1 , SIZE : 20 , } as const ;","title":"3. Constants"},{"location":"architecture/shared/#best-practices","text":"","title":"Best Practices"},{"location":"architecture/shared/#1-type-safety","text":"Use strict type checking Avoid type assertions Document complex types Use type guards","title":"1. Type Safety"},{"location":"architecture/shared/#2-code-organization","text":"Group by domain Clear file structure Consistent naming Proper exports","title":"2. Code Organization"},{"location":"architecture/shared/#3-performance","text":"Optimize imports Minimize dependencies Use pure functions Cache results","title":"3. Performance"},{"location":"architecture/shared/#4-maintenance","text":"Clear documentation Version control Breaking changes Migration guides","title":"4. Maintenance"},{"location":"architecture/shared/#development-workflow","text":"","title":"Development Workflow"},{"location":"architecture/shared/#1-type-development","text":"graph LR Define[Define Types] Review[Review Types] Test[Test Types] Document[Document Types] Deploy[Deploy Types] Define --> Review Review --> Test Test --> Document Document --> Deploy","title":"1. Type Development"},{"location":"architecture/shared/#2-utility-development","text":"graph LR Design[Design API] Implement[Implement] Test[Test] Document[Document] Release[Release] Design --> Implement Implement --> Test Test --> Document Document --> Release","title":"2. Utility Development"},{"location":"architecture/shared/#3-constant-management","text":"graph LR Define[Define Constants] Review[Review Usage] Update[Update Values] Deploy[Deploy Changes] Define --> Review Review --> Update Update --> Deploy","title":"3. Constant Management"},{"location":"architecture/shared/#next-steps","text":"Type System Guide Utility Guide Constants Guide","title":"Next Steps"},{"location":"architecture/overview/backend/","text":"Backend Architecture \u00b6 Overview \u00b6 The backend architecture is designed with a focus on performance, maintainability, and type safety. We use Fastify as our server framework, with TypeScript for type safety and better developer experience. Current Implementation Status \u00b6 Implemented \u2705 \u00b6 Basic server setup with Fastify TypeScript configuration Project structure Development environment In Progress \ud83d\udd04 \u00b6 Basic API Structure Development Guidelines Planned \u23f3 \u00b6 Authentication System Database Implementation API Guidelines Security Features Core Components \u00b6 Server \u00b6 Framework: Fastify Language: TypeScript Environment: Node.js Project Structure \u00b6 src/backend/ \u251c\u2500\u2500 server.ts # Server entry point \u251c\u2500\u2500 routes/ # API routes \u251c\u2500\u2500 services/ # Business logic \u251c\u2500\u2500 models/ # Data models \u251c\u2500\u2500 middleware/ # Request/response middleware \u2514\u2500\u2500 utils/ # Backend utilities Development \u00b6 For development guidelines and setup instructions, please refer to: - Development Guide - Project Structure Future Implementations \u00b6 The following features are planned but not yet implemented: Authentication System JWT-based authentication Role-based access control OAuth integration Database Integration MongoDB with Prisma Migration system Data validation Security Features Rate limiting CORS configuration Security headers Please check the Specification Tracking document for updates on implementation status.","title":"Overview"},{"location":"architecture/overview/backend/#backend-architecture","text":"","title":"Backend Architecture"},{"location":"architecture/overview/backend/#overview","text":"The backend architecture is designed with a focus on performance, maintainability, and type safety. We use Fastify as our server framework, with TypeScript for type safety and better developer experience.","title":"Overview"},{"location":"architecture/overview/backend/#current-implementation-status","text":"","title":"Current Implementation Status"},{"location":"architecture/overview/backend/#implemented","text":"Basic server setup with Fastify TypeScript configuration Project structure Development environment","title":"Implemented \u2705"},{"location":"architecture/overview/backend/#in-progress","text":"Basic API Structure Development Guidelines","title":"In Progress \ud83d\udd04"},{"location":"architecture/overview/backend/#planned","text":"Authentication System Database Implementation API Guidelines Security Features","title":"Planned \u23f3"},{"location":"architecture/overview/backend/#core-components","text":"","title":"Core Components"},{"location":"architecture/overview/backend/#server","text":"Framework: Fastify Language: TypeScript Environment: Node.js","title":"Server"},{"location":"architecture/overview/backend/#project-structure","text":"src/backend/ \u251c\u2500\u2500 server.ts # Server entry point \u251c\u2500\u2500 routes/ # API routes \u251c\u2500\u2500 services/ # Business logic \u251c\u2500\u2500 models/ # Data models \u251c\u2500\u2500 middleware/ # Request/response middleware \u2514\u2500\u2500 utils/ # Backend utilities","title":"Project Structure"},{"location":"architecture/overview/backend/#development","text":"For development guidelines and setup instructions, please refer to: - Development Guide - Project Structure","title":"Development"},{"location":"architecture/overview/backend/#future-implementations","text":"The following features are planned but not yet implemented: Authentication System JWT-based authentication Role-based access control OAuth integration Database Integration MongoDB with Prisma Migration system Data validation Security Features Rate limiting CORS configuration Security headers Please check the Specification Tracking document for updates on implementation status.","title":"Future Implementations"},{"location":"architecture/overview/frontend/","text":"Frontend Architecture \u00b6 Overview \u00b6 The frontend architecture is built using Lit Web Components, providing a modern, performant, and maintainable component system. TypeScript ensures type safety and improved developer experience. Current Implementation Status \u00b6 Implemented \u2705 \u00b6 Project structure setup TypeScript configuration Basic component system Development environment In Progress \ud83d\udd04 \u00b6 Component Documentation Development Guidelines Planned \u23f3 \u00b6 State Management Routing System Component Guidelines UI/UX Standards Core Components \u00b6 Technology Stack \u00b6 Framework: Lit Web Components Language: TypeScript Styling: Tailwind CSS Development: Vite Project Structure \u00b6 src/frontend/ \u251c\u2500\u2500 components/ # Web components \u251c\u2500\u2500 styles/ # Global styles and themes \u251c\u2500\u2500 utils/ # Frontend utilities \u251c\u2500\u2500 routes/ # Application routing \u2514\u2500\u2500 stores/ # State management Development \u00b6 For development guidelines and setup instructions, please refer to: - Development Guide - Project Structure Future Implementations \u00b6 The following features are planned but not yet implemented: State Management Reactive stores Context providers Type-safe state Routing System Type-safe routes Route guards Lazy loading Component System Design system Component guidelines Accessibility standards Please check the Specification Tracking document for updates on implementation status.","title":"Overview"},{"location":"architecture/overview/frontend/#frontend-architecture","text":"","title":"Frontend Architecture"},{"location":"architecture/overview/frontend/#overview","text":"The frontend architecture is built using Lit Web Components, providing a modern, performant, and maintainable component system. TypeScript ensures type safety and improved developer experience.","title":"Overview"},{"location":"architecture/overview/frontend/#current-implementation-status","text":"","title":"Current Implementation Status"},{"location":"architecture/overview/frontend/#implemented","text":"Project structure setup TypeScript configuration Basic component system Development environment","title":"Implemented \u2705"},{"location":"architecture/overview/frontend/#in-progress","text":"Component Documentation Development Guidelines","title":"In Progress \ud83d\udd04"},{"location":"architecture/overview/frontend/#planned","text":"State Management Routing System Component Guidelines UI/UX Standards","title":"Planned \u23f3"},{"location":"architecture/overview/frontend/#core-components","text":"","title":"Core Components"},{"location":"architecture/overview/frontend/#technology-stack","text":"Framework: Lit Web Components Language: TypeScript Styling: Tailwind CSS Development: Vite","title":"Technology Stack"},{"location":"architecture/overview/frontend/#project-structure","text":"src/frontend/ \u251c\u2500\u2500 components/ # Web components \u251c\u2500\u2500 styles/ # Global styles and themes \u251c\u2500\u2500 utils/ # Frontend utilities \u251c\u2500\u2500 routes/ # Application routing \u2514\u2500\u2500 stores/ # State management","title":"Project Structure"},{"location":"architecture/overview/frontend/#development","text":"For development guidelines and setup instructions, please refer to: - Development Guide - Project Structure","title":"Development"},{"location":"architecture/overview/frontend/#future-implementations","text":"The following features are planned but not yet implemented: State Management Reactive stores Context providers Type-safe state Routing System Type-safe routes Route guards Lazy loading Component System Design system Component guidelines Accessibility standards Please check the Specification Tracking document for updates on implementation status.","title":"Future Implementations"},{"location":"architecture/overview/shared/","text":"Shared Architecture \u00b6 Overview \u00b6 The shared architecture contains code and utilities used by both frontend and backend components. This ensures consistency, reduces duplication, and maintains type safety across the application. Current Implementation Status \u00b6 Implemented \u2705 \u00b6 Project structure setup TypeScript configuration Basic module system Development environment In Progress \ud83d\udd04 \u00b6 Type definitions Development Guidelines Planned \u23f3 \u00b6 Shared utilities Constants management Validation schemas Core Components \u00b6 Technology Stack \u00b6 Language: TypeScript Validation: Zod Testing: Vitest Project Structure \u00b6 src/shared/ \u251c\u2500\u2500 types/ # TypeScript type definitions \u251c\u2500\u2500 constants/ # Shared constants \u251c\u2500\u2500 utils/ # Common utilities \u2514\u2500\u2500 validation/ # Shared validation schemas Development \u00b6 For development guidelines and setup instructions, please refer to: - Development Guide - Project Structure Future Implementations \u00b6 The following features are planned but not yet implemented: Type System API interfaces Data models Utility types Validation System Input validation Data schemas Error handling Utilities Date handling String manipulation Type guards Please check the Specification Tracking document for updates on implementation status.","title":"Overview"},{"location":"architecture/overview/shared/#shared-architecture","text":"","title":"Shared Architecture"},{"location":"architecture/overview/shared/#overview","text":"The shared architecture contains code and utilities used by both frontend and backend components. This ensures consistency, reduces duplication, and maintains type safety across the application.","title":"Overview"},{"location":"architecture/overview/shared/#current-implementation-status","text":"","title":"Current Implementation Status"},{"location":"architecture/overview/shared/#implemented","text":"Project structure setup TypeScript configuration Basic module system Development environment","title":"Implemented \u2705"},{"location":"architecture/overview/shared/#in-progress","text":"Type definitions Development Guidelines","title":"In Progress \ud83d\udd04"},{"location":"architecture/overview/shared/#planned","text":"Shared utilities Constants management Validation schemas","title":"Planned \u23f3"},{"location":"architecture/overview/shared/#core-components","text":"","title":"Core Components"},{"location":"architecture/overview/shared/#technology-stack","text":"Language: TypeScript Validation: Zod Testing: Vitest","title":"Technology Stack"},{"location":"architecture/overview/shared/#project-structure","text":"src/shared/ \u251c\u2500\u2500 types/ # TypeScript type definitions \u251c\u2500\u2500 constants/ # Shared constants \u251c\u2500\u2500 utils/ # Common utilities \u2514\u2500\u2500 validation/ # Shared validation schemas","title":"Project Structure"},{"location":"architecture/overview/shared/#development","text":"For development guidelines and setup instructions, please refer to: - Development Guide - Project Structure","title":"Development"},{"location":"architecture/overview/shared/#future-implementations","text":"The following features are planned but not yet implemented: Type System API interfaces Data models Utility types Validation System Input validation Data schemas Error handling Utilities Date handling String manipulation Type guards Please check the Specification Tracking document for updates on implementation status.","title":"Future Implementations"},{"location":"backend/database/","text":"Database Guidelines \u00b6","title":"Database"},{"location":"backend/database/#database-guidelines","text":"","title":"Database Guidelines"},{"location":"backend/security/","text":"Security Guidelines \u00b6","title":"Security"},{"location":"backend/security/#security-guidelines","text":"","title":"Security Guidelines"},{"location":"backend/api/guidelines/","text":"API Guidelines \u00b6 Overview \u00b6 This document outlines the guidelines and best practices for API development in the FARM Stack project. API Design Principles \u00b6 RESTful architecture Consistent naming conventions Proper HTTP method usage Comprehensive error handling Documentation Standards \u00b6 OpenAPI/Swagger specifications Endpoint documentation Request/Response examples Error codes and descriptions Security Guidelines \u00b6 Authentication requirements Authorization rules Input validation Rate limiting Best Practices \u00b6 Version control Testing requirements Performance considerations Monitoring and logging","title":"Guidelines"},{"location":"backend/api/guidelines/#api-guidelines","text":"","title":"API Guidelines"},{"location":"backend/api/guidelines/#overview","text":"This document outlines the guidelines and best practices for API development in the FARM Stack project.","title":"Overview"},{"location":"backend/api/guidelines/#api-design-principles","text":"RESTful architecture Consistent naming conventions Proper HTTP method usage Comprehensive error handling","title":"API Design Principles"},{"location":"backend/api/guidelines/#documentation-standards","text":"OpenAPI/Swagger specifications Endpoint documentation Request/Response examples Error codes and descriptions","title":"Documentation Standards"},{"location":"backend/api/guidelines/#security-guidelines","text":"Authentication requirements Authorization rules Input validation Rate limiting","title":"Security Guidelines"},{"location":"backend/api/guidelines/#best-practices","text":"Version control Testing requirements Performance considerations Monitoring and logging","title":"Best Practices"},{"location":"development/","text":"Development Overview \u00b6 Introduction \u00b6 This section covers the development practices, guidelines, and processes for the FARM Stack project. Our development approach focuses on maintainability, type safety, and developer experience. Quick Links \u00b6 Development Guidelines - Coding standards and best practices Testing Guide - Testing strategies and practices Development Environment \u00b6 Prerequisites \u00b6 Node.js 22.0 or higher npm 10.0 or higher Git Python 3.x (for documentation) Git Bash (recommended) or another terminal Getting Started \u00b6 Clone the repository Install dependencies Set up your development environment Start the development servers For detailed setup instructions, see the Installation Guide . Development Workflow \u00b6 1. Code Quality \u00b6 # Run linting npm run lint # Type checking npm run typecheck # Run tests npm run test 2. Development Servers \u00b6 # Start all development servers npm run dev # Start individual servers npm run dev:frontend # Frontend on port 3000 npm run dev:backend # Backend on port 8000 npm run storybook # Storybook on port 6006 3. Documentation \u00b6 # Start documentation server npm run docs # Build documentation npm run docs build Project Structure \u00b6 For details about the project structure, see the Project Structure Guide . Current Status \u00b6 The project is under active development. For the current status of features and components, see: - Specification Tracking - Architecture Overview","title":"Overview"},{"location":"development/#development-overview","text":"","title":"Development Overview"},{"location":"development/#introduction","text":"This section covers the development practices, guidelines, and processes for the FARM Stack project. Our development approach focuses on maintainability, type safety, and developer experience.","title":"Introduction"},{"location":"development/#quick-links","text":"Development Guidelines - Coding standards and best practices Testing Guide - Testing strategies and practices","title":"Quick Links"},{"location":"development/#development-environment","text":"","title":"Development Environment"},{"location":"development/#prerequisites","text":"Node.js 22.0 or higher npm 10.0 or higher Git Python 3.x (for documentation) Git Bash (recommended) or another terminal","title":"Prerequisites"},{"location":"development/#getting-started","text":"Clone the repository Install dependencies Set up your development environment Start the development servers For detailed setup instructions, see the Installation Guide .","title":"Getting Started"},{"location":"development/#development-workflow","text":"","title":"Development Workflow"},{"location":"development/#1-code-quality","text":"# Run linting npm run lint # Type checking npm run typecheck # Run tests npm run test","title":"1. Code Quality"},{"location":"development/#2-development-servers","text":"# Start all development servers npm run dev # Start individual servers npm run dev:frontend # Frontend on port 3000 npm run dev:backend # Backend on port 8000 npm run storybook # Storybook on port 6006","title":"2. Development Servers"},{"location":"development/#3-documentation","text":"# Start documentation server npm run docs # Build documentation npm run docs build","title":"3. Documentation"},{"location":"development/#project-structure","text":"For details about the project structure, see the Project Structure Guide .","title":"Project Structure"},{"location":"development/#current-status","text":"The project is under active development. For the current status of features and components, see: - Specification Tracking - Architecture Overview","title":"Current Status"},{"location":"development/guidelines/","text":"Development Guidelines \u00b6 Overview \u00b6 These guidelines outline our development practices and standards. They are designed to ensure code quality, maintainability, and consistency across the project. Code Style \u00b6 TypeScript \u00b6 Use TypeScript for all code Enable strict mode Properly type all functions and variables Use interfaces for object shapes Leverage type inference when appropriate Formatting \u00b6 Use 2 spaces for indentation Use single quotes for strings Add semicolons at the end of statements Maximum line length of 100 characters Use trailing commas in multiline constructs Naming Conventions \u00b6 Use PascalCase for: Classes Interfaces Type aliases Enums Use camelCase for: Variables Functions Methods Properties Use UPPER_CASE for: Constants Environment variables Component Development \u00b6 Web Components \u00b6 Use Lit decorators Keep components focused and small Document component properties Include usage examples Write component tests Styling \u00b6 Use Tailwind CSS for styling Follow utility-first approach Keep styles scoped to components Use CSS custom properties for theming Testing \u00b6 Unit Tests \u00b6 Write tests alongside code Follow AAA pattern (Arrange, Act, Assert) Mock external dependencies Aim for high coverage Component Tests \u00b6 Test component rendering Test component interactions Test accessibility Use Storybook for visual testing Documentation \u00b6 Code Documentation \u00b6 Document public APIs Use JSDoc comments Include examples Document edge cases Project Documentation \u00b6 Keep documentation up to date Document architectural decisions Include setup instructions Provide usage examples Version Control \u00b6 Git Workflow \u00b6 Create feature branches from develop Use meaningful commit messages Keep commits focused Write descriptive PR descriptions Branch Naming \u00b6 feature/* for new features bugfix/* for bug fixes hotfix/* for urgent fixes release/* for releases Code Review \u00b6 Process \u00b6 Create pull request Request reviews Address feedback Update documentation Merge when approved Review Guidelines \u00b6 Check code style Verify tests Review documentation Test functionality Consider performance Current Status \u00b6 These guidelines are being actively developed. For the current status of our development standards, see: - Specification Tracking - Architecture Overview","title":"Guidelines"},{"location":"development/guidelines/#development-guidelines","text":"","title":"Development Guidelines"},{"location":"development/guidelines/#overview","text":"These guidelines outline our development practices and standards. They are designed to ensure code quality, maintainability, and consistency across the project.","title":"Overview"},{"location":"development/guidelines/#code-style","text":"","title":"Code Style"},{"location":"development/guidelines/#typescript","text":"Use TypeScript for all code Enable strict mode Properly type all functions and variables Use interfaces for object shapes Leverage type inference when appropriate","title":"TypeScript"},{"location":"development/guidelines/#formatting","text":"Use 2 spaces for indentation Use single quotes for strings Add semicolons at the end of statements Maximum line length of 100 characters Use trailing commas in multiline constructs","title":"Formatting"},{"location":"development/guidelines/#naming-conventions","text":"Use PascalCase for: Classes Interfaces Type aliases Enums Use camelCase for: Variables Functions Methods Properties Use UPPER_CASE for: Constants Environment variables","title":"Naming Conventions"},{"location":"development/guidelines/#component-development","text":"","title":"Component Development"},{"location":"development/guidelines/#web-components","text":"Use Lit decorators Keep components focused and small Document component properties Include usage examples Write component tests","title":"Web Components"},{"location":"development/guidelines/#styling","text":"Use Tailwind CSS for styling Follow utility-first approach Keep styles scoped to components Use CSS custom properties for theming","title":"Styling"},{"location":"development/guidelines/#testing","text":"","title":"Testing"},{"location":"development/guidelines/#unit-tests","text":"Write tests alongside code Follow AAA pattern (Arrange, Act, Assert) Mock external dependencies Aim for high coverage","title":"Unit Tests"},{"location":"development/guidelines/#component-tests","text":"Test component rendering Test component interactions Test accessibility Use Storybook for visual testing","title":"Component Tests"},{"location":"development/guidelines/#documentation","text":"","title":"Documentation"},{"location":"development/guidelines/#code-documentation","text":"Document public APIs Use JSDoc comments Include examples Document edge cases","title":"Code Documentation"},{"location":"development/guidelines/#project-documentation","text":"Keep documentation up to date Document architectural decisions Include setup instructions Provide usage examples","title":"Project Documentation"},{"location":"development/guidelines/#version-control","text":"","title":"Version Control"},{"location":"development/guidelines/#git-workflow","text":"Create feature branches from develop Use meaningful commit messages Keep commits focused Write descriptive PR descriptions","title":"Git Workflow"},{"location":"development/guidelines/#branch-naming","text":"feature/* for new features bugfix/* for bug fixes hotfix/* for urgent fixes release/* for releases","title":"Branch Naming"},{"location":"development/guidelines/#code-review","text":"","title":"Code Review"},{"location":"development/guidelines/#process","text":"Create pull request Request reviews Address feedback Update documentation Merge when approved","title":"Process"},{"location":"development/guidelines/#review-guidelines","text":"Check code style Verify tests Review documentation Test functionality Consider performance","title":"Review Guidelines"},{"location":"development/guidelines/#current-status","text":"These guidelines are being actively developed. For the current status of our development standards, see: - Specification Tracking - Architecture Overview","title":"Current Status"},{"location":"development/testing/","text":"Testing Guide \u00b6 Overview \u00b6 This guide covers our testing practices and strategies. We use a comprehensive testing approach that includes unit tests, component tests, and end-to-end tests. Testing Stack \u00b6 Core Testing Tools \u00b6 Vitest - Unit and integration testing Playwright - End-to-end testing Storybook - Component testing and documentation Testing Library - DOM testing utilities Test Types \u00b6 Unit Tests \u00b6 # Run unit tests npm run test # Watch mode npm run test:watch # Coverage report npm run test:coverage Unit tests should: - Test individual functions and components - Mock external dependencies - Be fast and isolated - Follow AAA pattern (Arrange, Act, Assert) Component Tests \u00b6 # Run component tests npm run test:components # Start Storybook npm run storybook Component tests should: - Test component rendering - Test component interactions - Verify accessibility - Include visual regression tests End-to-End Tests \u00b6 # Run E2E tests npm run test:e2e # Run specific test npm run test:e2e -- tests/example.spec.ts E2E tests should: - Test critical user paths - Verify integrations - Test across browsers - Include mobile testing Test Organization \u00b6 File Structure \u00b6 src/ \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 Component.ts \u2502 \u251c\u2500\u2500 Component.test.ts \u2502 \u2514\u2500\u2500 Component.stories.ts \u251c\u2500\u2500 utils/ \u2502 \u251c\u2500\u2500 util.ts \u2502 \u2514\u2500\u2500 util.test.ts \u2514\u2500\u2500 tests/ \u2514\u2500\u2500 e2e/ \u2514\u2500\u2500 example.spec.ts Naming Conventions \u00b6 *.test.ts - Unit and integration tests *.spec.ts - E2E tests *.stories.ts - Storybook stories Best Practices \u00b6 Writing Tests \u00b6 Test behavior, not implementation Keep tests simple and readable Use meaningful test descriptions Follow the AAA pattern Write independent tests Test Coverage \u00b6 Aim for high coverage but focus on quality Cover edge cases Test error scenarios Include accessibility tests Mocking \u00b6 Mock external dependencies Use meaningful test data Keep mocks simple Document mock behavior Continuous Integration \u00b6 Tests run automatically: - On pull requests - Before deployment - On scheduled intervals CI Pipeline \u00b6 Install dependencies Run linting Run unit tests Run component tests Run E2E tests Generate coverage report Current Status \u00b6 Testing infrastructure is being actively developed. For current status, see: - Specification Tracking - Architecture Overview","title":"Testing"},{"location":"development/testing/#testing-guide","text":"","title":"Testing Guide"},{"location":"development/testing/#overview","text":"This guide covers our testing practices and strategies. We use a comprehensive testing approach that includes unit tests, component tests, and end-to-end tests.","title":"Overview"},{"location":"development/testing/#testing-stack","text":"","title":"Testing Stack"},{"location":"development/testing/#core-testing-tools","text":"Vitest - Unit and integration testing Playwright - End-to-end testing Storybook - Component testing and documentation Testing Library - DOM testing utilities","title":"Core Testing Tools"},{"location":"development/testing/#test-types","text":"","title":"Test Types"},{"location":"development/testing/#unit-tests","text":"# Run unit tests npm run test # Watch mode npm run test:watch # Coverage report npm run test:coverage Unit tests should: - Test individual functions and components - Mock external dependencies - Be fast and isolated - Follow AAA pattern (Arrange, Act, Assert)","title":"Unit Tests"},{"location":"development/testing/#component-tests","text":"# Run component tests npm run test:components # Start Storybook npm run storybook Component tests should: - Test component rendering - Test component interactions - Verify accessibility - Include visual regression tests","title":"Component Tests"},{"location":"development/testing/#end-to-end-tests","text":"# Run E2E tests npm run test:e2e # Run specific test npm run test:e2e -- tests/example.spec.ts E2E tests should: - Test critical user paths - Verify integrations - Test across browsers - Include mobile testing","title":"End-to-End Tests"},{"location":"development/testing/#test-organization","text":"","title":"Test Organization"},{"location":"development/testing/#file-structure","text":"src/ \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 Component.ts \u2502 \u251c\u2500\u2500 Component.test.ts \u2502 \u2514\u2500\u2500 Component.stories.ts \u251c\u2500\u2500 utils/ \u2502 \u251c\u2500\u2500 util.ts \u2502 \u2514\u2500\u2500 util.test.ts \u2514\u2500\u2500 tests/ \u2514\u2500\u2500 e2e/ \u2514\u2500\u2500 example.spec.ts","title":"File Structure"},{"location":"development/testing/#naming-conventions","text":"*.test.ts - Unit and integration tests *.spec.ts - E2E tests *.stories.ts - Storybook stories","title":"Naming Conventions"},{"location":"development/testing/#best-practices","text":"","title":"Best Practices"},{"location":"development/testing/#writing-tests","text":"Test behavior, not implementation Keep tests simple and readable Use meaningful test descriptions Follow the AAA pattern Write independent tests","title":"Writing Tests"},{"location":"development/testing/#test-coverage","text":"Aim for high coverage but focus on quality Cover edge cases Test error scenarios Include accessibility tests","title":"Test Coverage"},{"location":"development/testing/#mocking","text":"Mock external dependencies Use meaningful test data Keep mocks simple Document mock behavior","title":"Mocking"},{"location":"development/testing/#continuous-integration","text":"Tests run automatically: - On pull requests - Before deployment - On scheduled intervals","title":"Continuous Integration"},{"location":"development/testing/#ci-pipeline","text":"Install dependencies Run linting Run unit tests Run component tests Run E2E tests Generate coverage report","title":"CI Pipeline"},{"location":"development/testing/#current-status","text":"Testing infrastructure is being actively developed. For current status, see: - Specification Tracking - Architecture Overview","title":"Current Status"},{"location":"frontend/routing/","text":"Routing \u00b6","title":"Routing"},{"location":"frontend/routing/#routing","text":"","title":"Routing"},{"location":"frontend/state-management/","text":"State Management \u00b6","title":"State Management"},{"location":"frontend/state-management/#state-management","text":"","title":"State Management"},{"location":"frontend/components/guidelines/","text":"Component Guidelines \u00b6","title":"Guidelines"},{"location":"frontend/components/guidelines/#component-guidelines","text":"","title":"Component Guidelines"},{"location":"getting-started/","text":"Getting Started \u00b6 Quick Start \u00b6 Follow these steps to get started with the Farm project: Prerequisites \u00b6 Node.js >= 18.0.0 npm or yarn Git MongoDB (for development) Installation \u00b6 Clone the repository: git clone https://github.com/Falkicon/farm.git cd farm Install dependencies: npm install Set up environment variables: cp .env.example .env Start the development server: npm run dev Project Structure \u00b6 farm/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 frontend/ # Frontend application code \u2502 \u2502 \u251c\u2500\u2500 components/ # Reusable UI components \u2502 \u2502 \u251c\u2500\u2500 styles/ # Global styles and themes \u2502 \u2502 \u2514\u2500\u2500 pages/ # Page components \u2502 \u251c\u2500\u2500 backend/ # Backend application code \u2502 \u2502 \u251c\u2500\u2500 api/ # API routes and controllers \u2502 \u2502 \u251c\u2500\u2500 models/ # Data models \u2502 \u2502 \u2514\u2500\u2500 services/ # Business logic \u2502 \u2514\u2500\u2500 shared/ # Shared code \u2502 \u251c\u2500\u2500 types/ # TypeScript types \u2502 \u2514\u2500\u2500 utils/ # Utility functions \u251c\u2500\u2500 docs/ # Documentation \u251c\u2500\u2500 tests/ # Test files \u2514\u2500\u2500 tools/ # Development tools Development Workflow \u00b6 Running the Application \u00b6 Start the development server: npm run dev Open your browser: Frontend: http://localhost:3000 Backend: http://localhost:8000 API Docs: http://localhost:8000/api-docs Testing \u00b6 Run the test suite: npm run test Run tests in watch mode: npm run test:watch Building \u00b6 Create a production build: npm run build Documentation \u00b6 Generate documentation: npm run docs View documentation locally: npm run docs:serve Next Steps \u00b6 Read the Architecture Overview Explore the Backend API Review the Component Guidelines","title":"Overview"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#quick-start","text":"Follow these steps to get started with the Farm project:","title":"Quick Start"},{"location":"getting-started/#prerequisites","text":"Node.js >= 18.0.0 npm or yarn Git MongoDB (for development)","title":"Prerequisites"},{"location":"getting-started/#installation","text":"Clone the repository: git clone https://github.com/Falkicon/farm.git cd farm Install dependencies: npm install Set up environment variables: cp .env.example .env Start the development server: npm run dev","title":"Installation"},{"location":"getting-started/#project-structure","text":"farm/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 frontend/ # Frontend application code \u2502 \u2502 \u251c\u2500\u2500 components/ # Reusable UI components \u2502 \u2502 \u251c\u2500\u2500 styles/ # Global styles and themes \u2502 \u2502 \u2514\u2500\u2500 pages/ # Page components \u2502 \u251c\u2500\u2500 backend/ # Backend application code \u2502 \u2502 \u251c\u2500\u2500 api/ # API routes and controllers \u2502 \u2502 \u251c\u2500\u2500 models/ # Data models \u2502 \u2502 \u2514\u2500\u2500 services/ # Business logic \u2502 \u2514\u2500\u2500 shared/ # Shared code \u2502 \u251c\u2500\u2500 types/ # TypeScript types \u2502 \u2514\u2500\u2500 utils/ # Utility functions \u251c\u2500\u2500 docs/ # Documentation \u251c\u2500\u2500 tests/ # Test files \u2514\u2500\u2500 tools/ # Development tools","title":"Project Structure"},{"location":"getting-started/#development-workflow","text":"","title":"Development Workflow"},{"location":"getting-started/#running-the-application","text":"Start the development server: npm run dev Open your browser: Frontend: http://localhost:3000 Backend: http://localhost:8000 API Docs: http://localhost:8000/api-docs","title":"Running the Application"},{"location":"getting-started/#testing","text":"Run the test suite: npm run test Run tests in watch mode: npm run test:watch","title":"Testing"},{"location":"getting-started/#building","text":"Create a production build: npm run build","title":"Building"},{"location":"getting-started/#documentation","text":"Generate documentation: npm run docs View documentation locally: npm run docs:serve","title":"Documentation"},{"location":"getting-started/#next-steps","text":"Read the Architecture Overview Explore the Backend API Review the Component Guidelines","title":"Next Steps"},{"location":"getting-started/development/","text":"Development Guide \u00b6 Terminal Setup \u00b6 Recommended Terminal \u00b6 For the best development experience, we recommend using Git Bash in VS Code: Open VS Code's integrated terminal ( Ctrl + ` ) Click the dropdown arrow next to the plus (+) icon in the terminal Select \"Git Bash\" from the dropdown menu Set Git Bash as your default terminal in VS Code: Press Ctrl + Shift + P Type \"Terminal: Select Default Profile\" Choose \"Git Bash\" Git Bash provides better compatibility with Node.js tools and consistent behavior across platforms. Alternative Terminals \u00b6 If you prefer not to use Git Bash, these terminals also work well: - Windows Terminal - WSL (Windows Subsystem for Linux) - Command Prompt (cmd.exe) Note : PowerShell may have output display issues with some Node.js tools due to buffering behavior. Development Environment \u00b6 Required Tools \u00b6 Node.js and npm # Check versions node --version # >= 18.0.0 npm --version # >= 10.0.0 Development Tools # Install global tools npm install -g typescript npm install -g @storybook/cli npm install -g mkdocs-material Database Tools MongoDB Compass (GUI) MongoDB Shell (CLI) Editor Setup \u00b6 VS Code (Recommended) \u00b6 Required Extensions ESLint Prettier Lit-Plugin TypeScript and JavaScript Language Features MongoDB for VS Code Workspace Settings { \"editor.formatOnSave\" : true , \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" , \"editor.codeActionsOnSave\" : { \"source.fixAll.eslint\" : true }, \"typescript.tsdk\" : \"node_modules/typescript/lib\" } Development Workflow \u00b6 1. Starting Development \u00b6 # Start all development servers npm run dev # Start frontend only npm run dev:frontend # Start backend only npm run dev:backend 2. Component Development \u00b6 Create Component // src/frontend/components/my-component.ts import { LitElement , html } from 'lit' ; import { customElement , property } from 'lit/decorators.js' ; @customElement ( 'my-component' ) export class MyComponent extends LitElement { @property () name = 'World' ; render () { return html `<h1>Hello, ${ this . name } !</h1>` ; } } Create Story // src/frontend/components/my-component.stories.ts import { html } from 'lit' ; import type { Meta , StoryObj } from '@storybook/web-components' ; import './my-component' ; const meta : Meta = { title : 'Components/MyComponent' , tags : [ 'autodocs' ], render : ( args ) => html ` <my-component .name= ${ args . name } ></my-component> ` , }; export default meta ; type Story = StoryObj ; export const Default : Story = { args : { name : 'World' , }, }; Create Tests // tests/frontend/components/my-component.test.ts import { fixture , expect } from '@open-wc/testing' ; import { MyComponent } from '../../../src/frontend/components/my-component' ; describe ( 'MyComponent' , () => { it ( 'renders with default name' , async () => { const el = await fixture < MyComponent > ( '<my-component></my-component>' ); expect ( el . name ). to . equal ( 'World' ); }); }); 3. API Development \u00b6 Create Route // src/backend/api/users/routes.ts import { FastifyPluginAsync } from 'fastify' ; import { getUserSchema } from './schema' ; export const userRoutes : FastifyPluginAsync = async ( fastify ) => { fastify . get ( '/users/:id' , { schema : getUserSchema , handler : async ( request , reply ) => { // Implementation }, }); }; Create Schema // src/backend/api/users/schema.ts export const getUserSchema = { params : { type : 'object' , properties : { id : { type : 'string' }, }, required : [ 'id' ], }, response : { 200 : { type : 'object' , properties : { id : { type : 'string' }, name : { type : 'string' }, }, }, }, }; Create Tests // tests/backend/api/users.test.ts import { build } from '../helper' ; describe ( 'User API' , () => { const app = await build (); test ( 'get user by id' , async () => { const response = await app . inject ({ method : 'GET' , url : '/users/123' , }); expect ( response . statusCode ). toBe ( 200 ); }); }); Testing \u00b6 Running Tests \u00b6 # Run all tests npm test # Run specific tests npm test -- frontend npm test -- backend npm test -- e2e # Run with coverage npm run test:coverage Test Types \u00b6 Unit Tests Component tests Utility function tests API handler tests Integration Tests API endpoint tests Database operations Component interactions E2E Tests User flows Critical paths Cross-browser testing Code Quality \u00b6 Linting and Formatting \u00b6 # Run linter npm run lint # Fix linting issues npm run lint:fix # Format code npm run format Pre-commit Hooks \u00b6 The project uses husky for pre-commit hooks: 1. Lint staged files 2. Run tests 3. Format code Pull Request Checks \u00b6 Required Checks All tests passing Code coverage maintained No linting errors Type checking passed Review Guidelines Code follows style guide Tests included Documentation updated Performance considered Documentation \u00b6 Writing Documentation \u00b6 Code Documentation Use JSDoc comments Document public APIs Include examples Component Documentation Create stories Document props Show usage examples API Documentation OpenAPI specifications Request/response examples Error scenarios Building Documentation \u00b6 # Generate API documentation npm run docs:api # Build full documentation npm run docs:build # Serve documentation locally npm run docs:dev Deployment \u00b6 Building for Production \u00b6 # Build all npm run build # Build frontend npm run build:frontend # Build backend npm run build:backend Environment Configuration \u00b6 Development NODE_ENV=development LOG_LEVEL=debug Production NODE_ENV=production LOG_LEVEL=info Deployment Checklist \u00b6 Environment variables set Database migrations run Static assets optimized Security headers configured Monitoring setup Backup strategy in place Performance \u00b6 Frontend Optimization \u00b6 Bundle Size # Analyze bundle npm run analyze Lazy Loading Route-based code splitting Component lazy loading Image optimization Backend Optimization \u00b6 Caching Response caching Database query caching Static asset caching Database Index optimization Query optimization Connection pooling Next Steps \u00b6 Architecture Overview Component Guidelines API Guidelines Project Structure \u00b6 See Project Structure for details about the codebase organization. Architecture \u00b6 See Architecture Overview for details about the system design. Troubleshooting \u00b6 Common Issues \u00b6 Terminal Output Issues \u00b6 If you experience issues with command output not displaying: 1. Switch to Git Bash terminal in VS Code 2. Ensure you're using Node.js 22+ ( node --version ) 3. Clear terminal cache: Ctrl + K Port Conflicts \u00b6 # Kill processes on specific ports npm run kill-ports Clean Start \u00b6 # Clean all build artifacts and caches npm run clean # Start fresh development servers npm run dev:clean For more help, check: - FAQ - GitHub Issues - Discord Community","title":"Development"},{"location":"getting-started/development/#development-guide","text":"","title":"Development Guide"},{"location":"getting-started/development/#terminal-setup","text":"","title":"Terminal Setup"},{"location":"getting-started/development/#recommended-terminal","text":"For the best development experience, we recommend using Git Bash in VS Code: Open VS Code's integrated terminal ( Ctrl + ` ) Click the dropdown arrow next to the plus (+) icon in the terminal Select \"Git Bash\" from the dropdown menu Set Git Bash as your default terminal in VS Code: Press Ctrl + Shift + P Type \"Terminal: Select Default Profile\" Choose \"Git Bash\" Git Bash provides better compatibility with Node.js tools and consistent behavior across platforms.","title":"Recommended Terminal"},{"location":"getting-started/development/#alternative-terminals","text":"If you prefer not to use Git Bash, these terminals also work well: - Windows Terminal - WSL (Windows Subsystem for Linux) - Command Prompt (cmd.exe) Note : PowerShell may have output display issues with some Node.js tools due to buffering behavior.","title":"Alternative Terminals"},{"location":"getting-started/development/#development-environment","text":"","title":"Development Environment"},{"location":"getting-started/development/#required-tools","text":"Node.js and npm # Check versions node --version # >= 18.0.0 npm --version # >= 10.0.0 Development Tools # Install global tools npm install -g typescript npm install -g @storybook/cli npm install -g mkdocs-material Database Tools MongoDB Compass (GUI) MongoDB Shell (CLI)","title":"Required Tools"},{"location":"getting-started/development/#editor-setup","text":"","title":"Editor Setup"},{"location":"getting-started/development/#vs-code-recommended","text":"Required Extensions ESLint Prettier Lit-Plugin TypeScript and JavaScript Language Features MongoDB for VS Code Workspace Settings { \"editor.formatOnSave\" : true , \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" , \"editor.codeActionsOnSave\" : { \"source.fixAll.eslint\" : true }, \"typescript.tsdk\" : \"node_modules/typescript/lib\" }","title":"VS Code (Recommended)"},{"location":"getting-started/development/#development-workflow","text":"","title":"Development Workflow"},{"location":"getting-started/development/#1-starting-development","text":"# Start all development servers npm run dev # Start frontend only npm run dev:frontend # Start backend only npm run dev:backend","title":"1. Starting Development"},{"location":"getting-started/development/#2-component-development","text":"Create Component // src/frontend/components/my-component.ts import { LitElement , html } from 'lit' ; import { customElement , property } from 'lit/decorators.js' ; @customElement ( 'my-component' ) export class MyComponent extends LitElement { @property () name = 'World' ; render () { return html `<h1>Hello, ${ this . name } !</h1>` ; } } Create Story // src/frontend/components/my-component.stories.ts import { html } from 'lit' ; import type { Meta , StoryObj } from '@storybook/web-components' ; import './my-component' ; const meta : Meta = { title : 'Components/MyComponent' , tags : [ 'autodocs' ], render : ( args ) => html ` <my-component .name= ${ args . name } ></my-component> ` , }; export default meta ; type Story = StoryObj ; export const Default : Story = { args : { name : 'World' , }, }; Create Tests // tests/frontend/components/my-component.test.ts import { fixture , expect } from '@open-wc/testing' ; import { MyComponent } from '../../../src/frontend/components/my-component' ; describe ( 'MyComponent' , () => { it ( 'renders with default name' , async () => { const el = await fixture < MyComponent > ( '<my-component></my-component>' ); expect ( el . name ). to . equal ( 'World' ); }); });","title":"2. Component Development"},{"location":"getting-started/development/#3-api-development","text":"Create Route // src/backend/api/users/routes.ts import { FastifyPluginAsync } from 'fastify' ; import { getUserSchema } from './schema' ; export const userRoutes : FastifyPluginAsync = async ( fastify ) => { fastify . get ( '/users/:id' , { schema : getUserSchema , handler : async ( request , reply ) => { // Implementation }, }); }; Create Schema // src/backend/api/users/schema.ts export const getUserSchema = { params : { type : 'object' , properties : { id : { type : 'string' }, }, required : [ 'id' ], }, response : { 200 : { type : 'object' , properties : { id : { type : 'string' }, name : { type : 'string' }, }, }, }, }; Create Tests // tests/backend/api/users.test.ts import { build } from '../helper' ; describe ( 'User API' , () => { const app = await build (); test ( 'get user by id' , async () => { const response = await app . inject ({ method : 'GET' , url : '/users/123' , }); expect ( response . statusCode ). toBe ( 200 ); }); });","title":"3. API Development"},{"location":"getting-started/development/#testing","text":"","title":"Testing"},{"location":"getting-started/development/#running-tests","text":"# Run all tests npm test # Run specific tests npm test -- frontend npm test -- backend npm test -- e2e # Run with coverage npm run test:coverage","title":"Running Tests"},{"location":"getting-started/development/#test-types","text":"Unit Tests Component tests Utility function tests API handler tests Integration Tests API endpoint tests Database operations Component interactions E2E Tests User flows Critical paths Cross-browser testing","title":"Test Types"},{"location":"getting-started/development/#code-quality","text":"","title":"Code Quality"},{"location":"getting-started/development/#linting-and-formatting","text":"# Run linter npm run lint # Fix linting issues npm run lint:fix # Format code npm run format","title":"Linting and Formatting"},{"location":"getting-started/development/#pre-commit-hooks","text":"The project uses husky for pre-commit hooks: 1. Lint staged files 2. Run tests 3. Format code","title":"Pre-commit Hooks"},{"location":"getting-started/development/#pull-request-checks","text":"Required Checks All tests passing Code coverage maintained No linting errors Type checking passed Review Guidelines Code follows style guide Tests included Documentation updated Performance considered","title":"Pull Request Checks"},{"location":"getting-started/development/#documentation","text":"","title":"Documentation"},{"location":"getting-started/development/#writing-documentation","text":"Code Documentation Use JSDoc comments Document public APIs Include examples Component Documentation Create stories Document props Show usage examples API Documentation OpenAPI specifications Request/response examples Error scenarios","title":"Writing Documentation"},{"location":"getting-started/development/#building-documentation","text":"# Generate API documentation npm run docs:api # Build full documentation npm run docs:build # Serve documentation locally npm run docs:dev","title":"Building Documentation"},{"location":"getting-started/development/#deployment","text":"","title":"Deployment"},{"location":"getting-started/development/#building-for-production","text":"# Build all npm run build # Build frontend npm run build:frontend # Build backend npm run build:backend","title":"Building for Production"},{"location":"getting-started/development/#environment-configuration","text":"Development NODE_ENV=development LOG_LEVEL=debug Production NODE_ENV=production LOG_LEVEL=info","title":"Environment Configuration"},{"location":"getting-started/development/#deployment-checklist","text":"Environment variables set Database migrations run Static assets optimized Security headers configured Monitoring setup Backup strategy in place","title":"Deployment Checklist"},{"location":"getting-started/development/#performance","text":"","title":"Performance"},{"location":"getting-started/development/#frontend-optimization","text":"Bundle Size # Analyze bundle npm run analyze Lazy Loading Route-based code splitting Component lazy loading Image optimization","title":"Frontend Optimization"},{"location":"getting-started/development/#backend-optimization","text":"Caching Response caching Database query caching Static asset caching Database Index optimization Query optimization Connection pooling","title":"Backend Optimization"},{"location":"getting-started/development/#next-steps","text":"Architecture Overview Component Guidelines API Guidelines","title":"Next Steps"},{"location":"getting-started/development/#project-structure","text":"See Project Structure for details about the codebase organization.","title":"Project Structure"},{"location":"getting-started/development/#architecture","text":"See Architecture Overview for details about the system design.","title":"Architecture"},{"location":"getting-started/development/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"getting-started/development/#common-issues","text":"","title":"Common Issues"},{"location":"getting-started/development/#terminal-output-issues","text":"If you experience issues with command output not displaying: 1. Switch to Git Bash terminal in VS Code 2. Ensure you're using Node.js 22+ ( node --version ) 3. Clear terminal cache: Ctrl + K","title":"Terminal Output Issues"},{"location":"getting-started/development/#port-conflicts","text":"# Kill processes on specific ports npm run kill-ports","title":"Port Conflicts"},{"location":"getting-started/development/#clean-start","text":"# Clean all build artifacts and caches npm run clean # Start fresh development servers npm run dev:clean For more help, check: - FAQ - GitHub Issues - Discord Community","title":"Clean Start"},{"location":"getting-started/installation/","text":"Installation Guide \u00b6 This guide will help you set up the FARM Stack boilerplate on your local development environment. Prerequisites \u00b6 Before you begin, ensure you have the following installed: Node.js (v18.0.0 or higher) npm (v10.0.0 or higher) Git MongoDB (v6.0 or higher) Quick Start \u00b6 Clone the repository: git clone https://github.com/Falkicon/farm.git cd farm Install dependencies: npm install Set up environment variables: cp .env.example .env Edit .env with your configuration: # Server Configuration PORT=8000 NODE_ENV=development # Database Configuration DATABASE_URL=\"mongodb://localhost:27017/farm\" # Security JWT_SECRET=\"your-secret-key\" Initialize the database: npm run db:setup Start the development server: npm run dev The application should now be running at: - Frontend: http://localhost:3000 - Backend: http://localhost:8000 - Storybook: http://localhost:6006 - Documentation: http://localhost:8082 Development Scripts \u00b6 Script Description npm run dev Start development servers (frontend & backend) npm run build Build the application for production npm run test Run test suite npm run lint Run linting checks npm run format Format code with Prettier npm run storybook Start Storybook development server npm run docs:dev Start documentation server IDE Setup \u00b6 VS Code \u00b6 Install recommended extensions: ESLint Prettier TypeScript and JavaScript Language Features Lit-Plugin MongoDB for VS Code Configure workspace settings: { \"editor.formatOnSave\" : true , \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" , \"editor.codeActionsOnSave\" : { \"source.fixAll.eslint\" : true } } Other IDEs \u00b6 For other IDEs, ensure you have: - ESLint integration - Prettier integration - TypeScript support - MongoDB tools Docker Setup (Optional) \u00b6 Build the Docker image: docker build -t farm-stack . Run with Docker Compose: docker-compose up -d This will start: - Application container - MongoDB container - Development tools container Troubleshooting \u00b6 Common Issues \u00b6 Port Conflicts # Check for processes using the ports netstat -ano | findstr \"3000\" netstat -ano | findstr \"8000\" # Kill process by PID taskkill /F /PID <process_id> MongoDB Connection # Verify MongoDB is running mongosh # Check connection string echo %DATABASE_URL% Node.js Version # Verify Node.js version node --version # Use nvm to switch versions if needed nvm use 18 Getting Help \u00b6 If you encounter issues: Check the FAQ Search GitHub Issues Join our Discord Community Next Steps \u00b6 Project Structure Development Guide Architecture Overview","title":"Installation"},{"location":"getting-started/installation/#installation-guide","text":"This guide will help you set up the FARM Stack boilerplate on your local development environment.","title":"Installation Guide"},{"location":"getting-started/installation/#prerequisites","text":"Before you begin, ensure you have the following installed: Node.js (v18.0.0 or higher) npm (v10.0.0 or higher) Git MongoDB (v6.0 or higher)","title":"Prerequisites"},{"location":"getting-started/installation/#quick-start","text":"Clone the repository: git clone https://github.com/Falkicon/farm.git cd farm Install dependencies: npm install Set up environment variables: cp .env.example .env Edit .env with your configuration: # Server Configuration PORT=8000 NODE_ENV=development # Database Configuration DATABASE_URL=\"mongodb://localhost:27017/farm\" # Security JWT_SECRET=\"your-secret-key\" Initialize the database: npm run db:setup Start the development server: npm run dev The application should now be running at: - Frontend: http://localhost:3000 - Backend: http://localhost:8000 - Storybook: http://localhost:6006 - Documentation: http://localhost:8082","title":"Quick Start"},{"location":"getting-started/installation/#development-scripts","text":"Script Description npm run dev Start development servers (frontend & backend) npm run build Build the application for production npm run test Run test suite npm run lint Run linting checks npm run format Format code with Prettier npm run storybook Start Storybook development server npm run docs:dev Start documentation server","title":"Development Scripts"},{"location":"getting-started/installation/#ide-setup","text":"","title":"IDE Setup"},{"location":"getting-started/installation/#vs-code","text":"Install recommended extensions: ESLint Prettier TypeScript and JavaScript Language Features Lit-Plugin MongoDB for VS Code Configure workspace settings: { \"editor.formatOnSave\" : true , \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" , \"editor.codeActionsOnSave\" : { \"source.fixAll.eslint\" : true } }","title":"VS Code"},{"location":"getting-started/installation/#other-ides","text":"For other IDEs, ensure you have: - ESLint integration - Prettier integration - TypeScript support - MongoDB tools","title":"Other IDEs"},{"location":"getting-started/installation/#docker-setup-optional","text":"Build the Docker image: docker build -t farm-stack . Run with Docker Compose: docker-compose up -d This will start: - Application container - MongoDB container - Development tools container","title":"Docker Setup (Optional)"},{"location":"getting-started/installation/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"getting-started/installation/#common-issues","text":"Port Conflicts # Check for processes using the ports netstat -ano | findstr \"3000\" netstat -ano | findstr \"8000\" # Kill process by PID taskkill /F /PID <process_id> MongoDB Connection # Verify MongoDB is running mongosh # Check connection string echo %DATABASE_URL% Node.js Version # Verify Node.js version node --version # Use nvm to switch versions if needed nvm use 18","title":"Common Issues"},{"location":"getting-started/installation/#getting-help","text":"If you encounter issues: Check the FAQ Search GitHub Issues Join our Discord Community","title":"Getting Help"},{"location":"getting-started/installation/#next-steps","text":"Project Structure Development Guide Architecture Overview","title":"Next Steps"},{"location":"getting-started/project-structure/","text":"Project Structure \u00b6 The FARM Stack boilerplate follows a monorepo structure, organizing code into clear, logical directories. This guide explains the organization and purpose of each major section. Directory Overview \u00b6 farm/ \u251c\u2500\u2500 src/ # Source code \u2502 \u251c\u2500\u2500 frontend/ # Frontend application \u2502 \u2502 \u251c\u2500\u2500 components/ # Web components \u2502 \u2502 \u251c\u2500\u2500 styles/ # Global styles \u2502 \u2502 \u251c\u2500\u2500 utils/ # Frontend utilities \u2502 \u2502 \u2514\u2500\u2500 index.ts # Frontend entry point \u2502 \u251c\u2500\u2500 backend/ # Backend server \u2502 \u2502 \u251c\u2500\u2500 api/ # API routes \u2502 \u2502 \u251c\u2500\u2500 config/ # Server configuration \u2502 \u2502 \u251c\u2500\u2500 db/ # Database setup \u2502 \u2502 \u2514\u2500\u2500 server.ts # Server entry point \u2502 \u2514\u2500\u2500 shared/ # Shared code \u2502 \u251c\u2500\u2500 types/ # TypeScript types \u2502 \u251c\u2500\u2500 constants/ # Shared constants \u2502 \u2514\u2500\u2500 utils/ # Shared utilities \u251c\u2500\u2500 docs/ # Documentation \u2502 \u251c\u2500\u2500 api/ # API documentation \u2502 \u251c\u2500\u2500 architecture/ # Architecture docs \u2502 \u2514\u2500\u2500 getting-started/ # Setup guides \u251c\u2500\u2500 tests/ # Test files \u2502 \u251c\u2500\u2500 frontend/ # Frontend tests \u2502 \u251c\u2500\u2500 backend/ # Backend tests \u2502 \u2514\u2500\u2500 e2e/ # End-to-end tests \u251c\u2500\u2500 tools/ # Development tools \u2502 \u251c\u2500\u2500 scripts/ # Build scripts \u2502 \u2514\u2500\u2500 config/ # Tool configurations \u2514\u2500\u2500 public/ # Static assets Key Directories Explained \u00b6 Source Code ( src/ ) \u00b6 Frontend ( src/frontend/ ) \u00b6 frontend/ \u251c\u2500\u2500 components/ # Web components \u2502 \u251c\u2500\u2500 app-shell/ # Application shell \u2502 \u251c\u2500\u2500 nav/ # Navigation components \u2502 \u251c\u2500\u2500 forms/ # Form components \u2502 \u2514\u2500\u2500 shared/ # Shared components \u251c\u2500\u2500 styles/ # Global styles \u2502 \u251c\u2500\u2500 themes/ # Theme definitions \u2502 \u2514\u2500\u2500 utilities/ # Style utilities \u251c\u2500\u2500 utils/ # Frontend utilities \u2502 \u251c\u2500\u2500 router/ # Routing logic \u2502 \u2514\u2500\u2500 state/ # State management \u2514\u2500\u2500 index.ts # Frontend entry point Backend ( src/backend/ ) \u00b6 backend/ \u251c\u2500\u2500 api/ # API routes \u2502 \u251c\u2500\u2500 health/ # Health check endpoints \u2502 \u251c\u2500\u2500 auth/ # Authentication endpoints \u2502 \u251c\u2500\u2500 users/ # User management \u2502 \u2514\u2500\u2500 files/ # File operations \u251c\u2500\u2500 config/ # Server configuration \u2502 \u251c\u2500\u2500 env.ts # Environment setup \u2502 \u2514\u2500\u2500 server.ts # Server settings \u251c\u2500\u2500 db/ # Database \u2502 \u251c\u2500\u2500 prisma/ # Prisma schema \u2502 \u2514\u2500\u2500 migrations/ # Database migrations \u2514\u2500\u2500 server.ts # Server entry point Shared ( src/shared/ ) \u00b6 shared/ \u251c\u2500\u2500 types/ # TypeScript types \u2502 \u251c\u2500\u2500 models/ # Data models \u2502 \u251c\u2500\u2500 api/ # API interfaces \u2502 \u2514\u2500\u2500 utils/ # Utility types \u251c\u2500\u2500 constants/ # Shared constants \u2502 \u251c\u2500\u2500 config/ # Configuration \u2502 \u251c\u2500\u2500 api/ # API constants \u2502 \u2514\u2500\u2500 ui/ # UI constants \u2514\u2500\u2500 utils/ # Shared utilities \u251c\u2500\u2500 date/ # Date handling \u251c\u2500\u2500 validation/ # Validation \u2514\u2500\u2500 formatting/ # Formatting Documentation ( docs/ ) \u00b6 docs/ \u251c\u2500\u2500 api/ # API documentation \u251c\u2500\u2500 architecture/ # Architecture docs \u251c\u2500\u2500 getting-started/ # Setup guides \u2514\u2500\u2500 assets/ # Documentation assets Tests ( tests/ ) \u00b6 tests/ \u251c\u2500\u2500 frontend/ # Frontend tests \u2502 \u251c\u2500\u2500 components/ # Component tests \u2502 \u2514\u2500\u2500 utils/ # Utility tests \u251c\u2500\u2500 backend/ # Backend tests \u2502 \u251c\u2500\u2500 api/ # API tests \u2502 \u2514\u2500\u2500 db/ # Database tests \u2514\u2500\u2500 e2e/ # End-to-end tests Configuration Files \u00b6 .env : Environment variables tsconfig.json : TypeScript configuration package.json : Project dependencies and scripts .eslintrc.json : ESLint configuration .prettierrc : Prettier configuration vite.config.ts : Vite configuration typedoc.json : TypeDoc configuration mkdocs.yml : Documentation configuration Special Files \u00b6 README.md : Project overview and quick start CHANGELOG.md : Version history LICENSE : Project license .gitignore : Git ignore patterns .npmrc : npm configuration Development Workflow \u00b6 Frontend Development Work in src/frontend/ Use Storybook for component development Follow component structure guidelines Backend Development Work in src/backend/ Follow API endpoint structure Update OpenAPI documentation Shared Code Place shared code in src/shared/ Update type definitions Maintain backwards compatibility Testing Write tests alongside source code Follow testing conventions Maintain test coverage Best Practices \u00b6 Component Organization One component per file Group related components Include stories and tests API Structure RESTful endpoint organization Clear route naming Proper error handling Code Style Follow ESLint rules Use Prettier formatting Write meaningful comments Documentation Update docs with changes Include examples Keep README current Next Steps \u00b6 Development Guide Architecture Overview Component Guidelines","title":"Project Structure"},{"location":"getting-started/project-structure/#project-structure","text":"The FARM Stack boilerplate follows a monorepo structure, organizing code into clear, logical directories. This guide explains the organization and purpose of each major section.","title":"Project Structure"},{"location":"getting-started/project-structure/#directory-overview","text":"farm/ \u251c\u2500\u2500 src/ # Source code \u2502 \u251c\u2500\u2500 frontend/ # Frontend application \u2502 \u2502 \u251c\u2500\u2500 components/ # Web components \u2502 \u2502 \u251c\u2500\u2500 styles/ # Global styles \u2502 \u2502 \u251c\u2500\u2500 utils/ # Frontend utilities \u2502 \u2502 \u2514\u2500\u2500 index.ts # Frontend entry point \u2502 \u251c\u2500\u2500 backend/ # Backend server \u2502 \u2502 \u251c\u2500\u2500 api/ # API routes \u2502 \u2502 \u251c\u2500\u2500 config/ # Server configuration \u2502 \u2502 \u251c\u2500\u2500 db/ # Database setup \u2502 \u2502 \u2514\u2500\u2500 server.ts # Server entry point \u2502 \u2514\u2500\u2500 shared/ # Shared code \u2502 \u251c\u2500\u2500 types/ # TypeScript types \u2502 \u251c\u2500\u2500 constants/ # Shared constants \u2502 \u2514\u2500\u2500 utils/ # Shared utilities \u251c\u2500\u2500 docs/ # Documentation \u2502 \u251c\u2500\u2500 api/ # API documentation \u2502 \u251c\u2500\u2500 architecture/ # Architecture docs \u2502 \u2514\u2500\u2500 getting-started/ # Setup guides \u251c\u2500\u2500 tests/ # Test files \u2502 \u251c\u2500\u2500 frontend/ # Frontend tests \u2502 \u251c\u2500\u2500 backend/ # Backend tests \u2502 \u2514\u2500\u2500 e2e/ # End-to-end tests \u251c\u2500\u2500 tools/ # Development tools \u2502 \u251c\u2500\u2500 scripts/ # Build scripts \u2502 \u2514\u2500\u2500 config/ # Tool configurations \u2514\u2500\u2500 public/ # Static assets","title":"Directory Overview"},{"location":"getting-started/project-structure/#key-directories-explained","text":"","title":"Key Directories Explained"},{"location":"getting-started/project-structure/#source-code-src","text":"","title":"Source Code (src/)"},{"location":"getting-started/project-structure/#frontend-srcfrontend","text":"frontend/ \u251c\u2500\u2500 components/ # Web components \u2502 \u251c\u2500\u2500 app-shell/ # Application shell \u2502 \u251c\u2500\u2500 nav/ # Navigation components \u2502 \u251c\u2500\u2500 forms/ # Form components \u2502 \u2514\u2500\u2500 shared/ # Shared components \u251c\u2500\u2500 styles/ # Global styles \u2502 \u251c\u2500\u2500 themes/ # Theme definitions \u2502 \u2514\u2500\u2500 utilities/ # Style utilities \u251c\u2500\u2500 utils/ # Frontend utilities \u2502 \u251c\u2500\u2500 router/ # Routing logic \u2502 \u2514\u2500\u2500 state/ # State management \u2514\u2500\u2500 index.ts # Frontend entry point","title":"Frontend (src/frontend/)"},{"location":"getting-started/project-structure/#backend-srcbackend","text":"backend/ \u251c\u2500\u2500 api/ # API routes \u2502 \u251c\u2500\u2500 health/ # Health check endpoints \u2502 \u251c\u2500\u2500 auth/ # Authentication endpoints \u2502 \u251c\u2500\u2500 users/ # User management \u2502 \u2514\u2500\u2500 files/ # File operations \u251c\u2500\u2500 config/ # Server configuration \u2502 \u251c\u2500\u2500 env.ts # Environment setup \u2502 \u2514\u2500\u2500 server.ts # Server settings \u251c\u2500\u2500 db/ # Database \u2502 \u251c\u2500\u2500 prisma/ # Prisma schema \u2502 \u2514\u2500\u2500 migrations/ # Database migrations \u2514\u2500\u2500 server.ts # Server entry point","title":"Backend (src/backend/)"},{"location":"getting-started/project-structure/#shared-srcshared","text":"shared/ \u251c\u2500\u2500 types/ # TypeScript types \u2502 \u251c\u2500\u2500 models/ # Data models \u2502 \u251c\u2500\u2500 api/ # API interfaces \u2502 \u2514\u2500\u2500 utils/ # Utility types \u251c\u2500\u2500 constants/ # Shared constants \u2502 \u251c\u2500\u2500 config/ # Configuration \u2502 \u251c\u2500\u2500 api/ # API constants \u2502 \u2514\u2500\u2500 ui/ # UI constants \u2514\u2500\u2500 utils/ # Shared utilities \u251c\u2500\u2500 date/ # Date handling \u251c\u2500\u2500 validation/ # Validation \u2514\u2500\u2500 formatting/ # Formatting","title":"Shared (src/shared/)"},{"location":"getting-started/project-structure/#documentation-docs","text":"docs/ \u251c\u2500\u2500 api/ # API documentation \u251c\u2500\u2500 architecture/ # Architecture docs \u251c\u2500\u2500 getting-started/ # Setup guides \u2514\u2500\u2500 assets/ # Documentation assets","title":"Documentation (docs/)"},{"location":"getting-started/project-structure/#tests-tests","text":"tests/ \u251c\u2500\u2500 frontend/ # Frontend tests \u2502 \u251c\u2500\u2500 components/ # Component tests \u2502 \u2514\u2500\u2500 utils/ # Utility tests \u251c\u2500\u2500 backend/ # Backend tests \u2502 \u251c\u2500\u2500 api/ # API tests \u2502 \u2514\u2500\u2500 db/ # Database tests \u2514\u2500\u2500 e2e/ # End-to-end tests","title":"Tests (tests/)"},{"location":"getting-started/project-structure/#configuration-files","text":".env : Environment variables tsconfig.json : TypeScript configuration package.json : Project dependencies and scripts .eslintrc.json : ESLint configuration .prettierrc : Prettier configuration vite.config.ts : Vite configuration typedoc.json : TypeDoc configuration mkdocs.yml : Documentation configuration","title":"Configuration Files"},{"location":"getting-started/project-structure/#special-files","text":"README.md : Project overview and quick start CHANGELOG.md : Version history LICENSE : Project license .gitignore : Git ignore patterns .npmrc : npm configuration","title":"Special Files"},{"location":"getting-started/project-structure/#development-workflow","text":"Frontend Development Work in src/frontend/ Use Storybook for component development Follow component structure guidelines Backend Development Work in src/backend/ Follow API endpoint structure Update OpenAPI documentation Shared Code Place shared code in src/shared/ Update type definitions Maintain backwards compatibility Testing Write tests alongside source code Follow testing conventions Maintain test coverage","title":"Development Workflow"},{"location":"getting-started/project-structure/#best-practices","text":"Component Organization One component per file Group related components Include stories and tests API Structure RESTful endpoint organization Clear route naming Proper error handling Code Style Follow ESLint rules Use Prettier formatting Write meaningful comments Documentation Update docs with changes Include examples Keep README current","title":"Best Practices"},{"location":"getting-started/project-structure/#next-steps","text":"Development Guide Architecture Overview Component Guidelines","title":"Next Steps"},{"location":"shared/constants/","text":"Constants \u00b6","title":"Constants"},{"location":"shared/constants/#constants","text":"","title":"Constants"},{"location":"shared/types/","text":"Types \u00b6","title":"Types"},{"location":"shared/types/#types","text":"","title":"Types"},{"location":"shared/utilities/","text":"Utilities \u00b6","title":"Utilities"},{"location":"shared/utilities/#utilities","text":"","title":"Utilities"},{"location":"specs/SPECIFICATION-TRACKING/","text":"Specification System Progress Tracking \u00b6 Current Status (December 13, 2023) \u00b6 Core Infrastructure \u00b6 \u2705 Project Structure \u2705 Base Configuration \u2705 Development Environment \u2705 Documentation System Documentation System \u00b6 \u2705 MkDocs Setup with Dracula Theme \u2705 Markdown Extensions Configuration \u2705 Basic Documentation Structure \u2705 Core Navigation Setup \u2705 TypeDoc Integration \u2705 API Documentation Generation \u2705 Cross-Platform Documentation Scripts Specification System \u00b6 \u2705 Directory Structure \u2705 YAML Schema Validation \u2705 Markdown Linting \u2705 Tracking System \u2705 Documentation Integration Implemented Features \u00b6 \u2705 Project Specification \u2705 Specification System Design \u2705 Module Structure \u2705 Documentation Workflow In Progress \u00b6 \ud83d\udd04 Component Documentation \ud83d\udd04 Development Guidelines \ud83d\udd04 Basic API Structure Not Started (Future Features) \u00b6 \u23f3 Authentication System \u23f3 User Management \u23f3 File Operations \u23f3 Database Implementation \u23f3 Testing Framework \u23f3 Security Features \u23f3 Deployment Pipeline \u23f3 Monitoring System Next Steps \u00b6 Complete component documentation Establish development guidelines Define basic API structure Review and validate existing specs Legend \u00b6 \u2705 Implemented and Documented \ud83d\udd04 In Progress \u23f3 Not Started \u274c Blocked Validation Status \u00b6 Documentation Build: Passing Link Validation: Passing Schema Validation: Passing TypeDoc Generation: Passing Cross-Platform Scripts: Passing Current Focus \u00b6 Documenting implemented features only Establishing clear development guidelines Creating foundational specifications Maintaining documentation quality Documentation Tasks \u00b6 \u2705 Set up MkDocs with Dracula theme \u2705 Configure TypeDoc for API documentation \u2705 Create cross-platform documentation scripts \u2705 Integrate API docs with main documentation \ud83d\udd04 Complete component documentation \ud83d\udd04 Expand development guidelines Notes \u00b6 Specifications should only be created for implemented features Future features will be specified during implementation Focus on quality over quantity Maintain clear status tracking Documentation should be kept in sync with implementation","title":"Tracking"},{"location":"specs/SPECIFICATION-TRACKING/#specification-system-progress-tracking","text":"","title":"Specification System Progress Tracking"},{"location":"specs/SPECIFICATION-TRACKING/#current-status-december-13-2023","text":"","title":"Current Status (December 13, 2023)"},{"location":"specs/SPECIFICATION-TRACKING/#core-infrastructure","text":"\u2705 Project Structure \u2705 Base Configuration \u2705 Development Environment \u2705 Documentation System","title":"Core Infrastructure"},{"location":"specs/SPECIFICATION-TRACKING/#documentation-system","text":"\u2705 MkDocs Setup with Dracula Theme \u2705 Markdown Extensions Configuration \u2705 Basic Documentation Structure \u2705 Core Navigation Setup \u2705 TypeDoc Integration \u2705 API Documentation Generation \u2705 Cross-Platform Documentation Scripts","title":"Documentation System"},{"location":"specs/SPECIFICATION-TRACKING/#specification-system","text":"\u2705 Directory Structure \u2705 YAML Schema Validation \u2705 Markdown Linting \u2705 Tracking System \u2705 Documentation Integration","title":"Specification System"},{"location":"specs/SPECIFICATION-TRACKING/#implemented-features","text":"\u2705 Project Specification \u2705 Specification System Design \u2705 Module Structure \u2705 Documentation Workflow","title":"Implemented Features"},{"location":"specs/SPECIFICATION-TRACKING/#in-progress","text":"\ud83d\udd04 Component Documentation \ud83d\udd04 Development Guidelines \ud83d\udd04 Basic API Structure","title":"In Progress"},{"location":"specs/SPECIFICATION-TRACKING/#not-started-future-features","text":"\u23f3 Authentication System \u23f3 User Management \u23f3 File Operations \u23f3 Database Implementation \u23f3 Testing Framework \u23f3 Security Features \u23f3 Deployment Pipeline \u23f3 Monitoring System","title":"Not Started (Future Features)"},{"location":"specs/SPECIFICATION-TRACKING/#next-steps","text":"Complete component documentation Establish development guidelines Define basic API structure Review and validate existing specs","title":"Next Steps"},{"location":"specs/SPECIFICATION-TRACKING/#legend","text":"\u2705 Implemented and Documented \ud83d\udd04 In Progress \u23f3 Not Started \u274c Blocked","title":"Legend"},{"location":"specs/SPECIFICATION-TRACKING/#validation-status","text":"Documentation Build: Passing Link Validation: Passing Schema Validation: Passing TypeDoc Generation: Passing Cross-Platform Scripts: Passing","title":"Validation Status"},{"location":"specs/SPECIFICATION-TRACKING/#current-focus","text":"Documenting implemented features only Establishing clear development guidelines Creating foundational specifications Maintaining documentation quality","title":"Current Focus"},{"location":"specs/SPECIFICATION-TRACKING/#documentation-tasks","text":"\u2705 Set up MkDocs with Dracula theme \u2705 Configure TypeDoc for API documentation \u2705 Create cross-platform documentation scripts \u2705 Integrate API docs with main documentation \ud83d\udd04 Complete component documentation \ud83d\udd04 Expand development guidelines","title":"Documentation Tasks"},{"location":"specs/SPECIFICATION-TRACKING/#notes","text":"Specifications should only be created for implemented features Future features will be specified during implementation Focus on quality over quantity Maintain clear status tracking Documentation should be kept in sync with implementation","title":"Notes"},{"location":"specs/backend/","text":"Backend Specifications \u00b6 Overview \u00b6 This document outlines the backend specifications for the Farm project, including API endpoints, data models, and server configurations. Core Components \u00b6 Health Check API \u00b6 Endpoint: /api/health Purpose: System health monitoring Response: Server status and uptime information Authentication System \u00b6 JWT-based authentication Secure password hashing Session management Rate limiting User Management \u00b6 User registration Profile management Role-based access control Account recovery File Operations \u00b6 File upload/download Storage management File validation Metadata handling API Structure \u00b6 All API endpoints follow RESTful conventions and are versioned: - Base URL: /api/v1 - Authentication: Bearer token - Response format: JSON Data Models \u00b6 User Model \u00b6 interface User { id : string ; email : string ; name : string ; role : UserRole ; createdAt : Date ; updatedAt : Date ; } File Model \u00b6 interface File { id : string ; name : string ; path : string ; size : number ; type : string ; userId : string ; createdAt : Date ; } Security Measures \u00b6 CORS configuration Helmet security headers Input validation Rate limiting SQL injection prevention Error Handling \u00b6 Standardized error responses: interface ErrorResponse { status : number ; message : string ; code : string ; details? : any ; } Performance Considerations \u00b6 Database indexing Caching strategy Query optimization Connection pooling","title":"Backend"},{"location":"specs/backend/#backend-specifications","text":"","title":"Backend Specifications"},{"location":"specs/backend/#overview","text":"This document outlines the backend specifications for the Farm project, including API endpoints, data models, and server configurations.","title":"Overview"},{"location":"specs/backend/#core-components","text":"","title":"Core Components"},{"location":"specs/backend/#health-check-api","text":"Endpoint: /api/health Purpose: System health monitoring Response: Server status and uptime information","title":"Health Check API"},{"location":"specs/backend/#authentication-system","text":"JWT-based authentication Secure password hashing Session management Rate limiting","title":"Authentication System"},{"location":"specs/backend/#user-management","text":"User registration Profile management Role-based access control Account recovery","title":"User Management"},{"location":"specs/backend/#file-operations","text":"File upload/download Storage management File validation Metadata handling","title":"File Operations"},{"location":"specs/backend/#api-structure","text":"All API endpoints follow RESTful conventions and are versioned: - Base URL: /api/v1 - Authentication: Bearer token - Response format: JSON","title":"API Structure"},{"location":"specs/backend/#data-models","text":"","title":"Data Models"},{"location":"specs/backend/#user-model","text":"interface User { id : string ; email : string ; name : string ; role : UserRole ; createdAt : Date ; updatedAt : Date ; }","title":"User Model"},{"location":"specs/backend/#file-model","text":"interface File { id : string ; name : string ; path : string ; size : number ; type : string ; userId : string ; createdAt : Date ; }","title":"File Model"},{"location":"specs/backend/#security-measures","text":"CORS configuration Helmet security headers Input validation Rate limiting SQL injection prevention","title":"Security Measures"},{"location":"specs/backend/#error-handling","text":"Standardized error responses: interface ErrorResponse { status : number ; message : string ; code : string ; details? : any ; }","title":"Error Handling"},{"location":"specs/backend/#performance-considerations","text":"Database indexing Caching strategy Query optimization Connection pooling","title":"Performance Considerations"},{"location":"specs/frontend/","text":"Frontend Specifications \u00b6 Overview \u00b6 This document outlines the frontend specifications for the Farm project, including component architecture, state management, and UI/UX guidelines. Core Components \u00b6 App Shell \u00b6 Main layout structure Navigation handling Theme management Error boundaries Navigation Components \u00b6 Top navigation bar Side menu Breadcrumbs Route guards Card Components \u00b6 Data display cards Action cards Status cards Loading states Form Components \u00b6 Input fields Validation Error handling Submit handlers State Management \u00b6 Store Structure \u00b6 interface AppState { user : UserState ; ui : UIState ; data : DataState ; errors : ErrorState ; } Actions and Effects \u00b6 User authentication Data fetching Error handling UI state updates Routing \u00b6 Route Structure \u00b6 interface Route { path : string ; component : Component ; guards? : RouteGuard []; children? : Route []; } UI/UX Guidelines \u00b6 Theme \u00b6 Color palette Typography Spacing Breakpoints Components \u00b6 Consistent styling Responsive design Accessibility Loading states Performance \u00b6 Optimization \u00b6 Code splitting Lazy loading Bundle size optimization Cache management Testing \u00b6 Component Testing \u00b6 Unit tests Integration tests E2E tests Visual regression tests Build and Deploy \u00b6 Build Process \u00b6 Development build Production build Environment configuration Asset optimization","title":"Frontend"},{"location":"specs/frontend/#frontend-specifications","text":"","title":"Frontend Specifications"},{"location":"specs/frontend/#overview","text":"This document outlines the frontend specifications for the Farm project, including component architecture, state management, and UI/UX guidelines.","title":"Overview"},{"location":"specs/frontend/#core-components","text":"","title":"Core Components"},{"location":"specs/frontend/#app-shell","text":"Main layout structure Navigation handling Theme management Error boundaries","title":"App Shell"},{"location":"specs/frontend/#navigation-components","text":"Top navigation bar Side menu Breadcrumbs Route guards","title":"Navigation Components"},{"location":"specs/frontend/#card-components","text":"Data display cards Action cards Status cards Loading states","title":"Card Components"},{"location":"specs/frontend/#form-components","text":"Input fields Validation Error handling Submit handlers","title":"Form Components"},{"location":"specs/frontend/#state-management","text":"","title":"State Management"},{"location":"specs/frontend/#store-structure","text":"interface AppState { user : UserState ; ui : UIState ; data : DataState ; errors : ErrorState ; }","title":"Store Structure"},{"location":"specs/frontend/#actions-and-effects","text":"User authentication Data fetching Error handling UI state updates","title":"Actions and Effects"},{"location":"specs/frontend/#routing","text":"","title":"Routing"},{"location":"specs/frontend/#route-structure","text":"interface Route { path : string ; component : Component ; guards? : RouteGuard []; children? : Route []; }","title":"Route Structure"},{"location":"specs/frontend/#uiux-guidelines","text":"","title":"UI/UX Guidelines"},{"location":"specs/frontend/#theme","text":"Color palette Typography Spacing Breakpoints","title":"Theme"},{"location":"specs/frontend/#components","text":"Consistent styling Responsive design Accessibility Loading states","title":"Components"},{"location":"specs/frontend/#performance","text":"","title":"Performance"},{"location":"specs/frontend/#optimization","text":"Code splitting Lazy loading Bundle size optimization Cache management","title":"Optimization"},{"location":"specs/frontend/#testing","text":"","title":"Testing"},{"location":"specs/frontend/#component-testing","text":"Unit tests Integration tests E2E tests Visual regression tests","title":"Component Testing"},{"location":"specs/frontend/#build-and-deploy","text":"","title":"Build and Deploy"},{"location":"specs/frontend/#build-process","text":"Development build Production build Environment configuration Asset optimization","title":"Build Process"},{"location":"specs/overview/","text":"Specifications Overview \u00b6 This section contains the detailed specifications for the FARM Stack project. The specifications are organized into several categories: Project Specifications \u00b6 High-level project specifications including: - Environment requirements - Technology stack - Security requirements - Non-functional requirements - Future roadmap Backend Specifications \u00b6 Detailed specifications for the backend system: - Server configuration - API endpoints - Database schema - Security measures - Monitoring Frontend Specifications \u00b6 Comprehensive frontend specifications covering: - Component architecture - State management - Routing - UI/UX guidelines - Performance targets Shared Specifications \u00b6 Specifications for shared resources: - Type definitions - Constants - Utilities - Common interfaces Implementation Status \u00b6 For the current implementation status of these specifications, see the Specification Tracking document.","title":"Overview"},{"location":"specs/overview/#specifications-overview","text":"This section contains the detailed specifications for the FARM Stack project. The specifications are organized into several categories:","title":"Specifications Overview"},{"location":"specs/overview/#project-specifications","text":"High-level project specifications including: - Environment requirements - Technology stack - Security requirements - Non-functional requirements - Future roadmap","title":"Project Specifications"},{"location":"specs/overview/#backend-specifications","text":"Detailed specifications for the backend system: - Server configuration - API endpoints - Database schema - Security measures - Monitoring","title":"Backend Specifications"},{"location":"specs/overview/#frontend-specifications","text":"Comprehensive frontend specifications covering: - Component architecture - State management - Routing - UI/UX guidelines - Performance targets","title":"Frontend Specifications"},{"location":"specs/overview/#shared-specifications","text":"Specifications for shared resources: - Type definitions - Constants - Utilities - Common interfaces","title":"Shared Specifications"},{"location":"specs/overview/#implementation-status","text":"For the current implementation status of these specifications, see the Specification Tracking document.","title":"Implementation Status"},{"location":"specs/shared/","text":"Shared Specifications \u00b6 Overview \u00b6 This document outlines shared specifications and resources used across both frontend and backend components of the Farm project. Type Definitions \u00b6 Common Types \u00b6 // User related types type UserRole = 'admin' | 'user' | 'guest' ; type UserStatus = 'active' | 'inactive' | 'suspended' ; // Data types type ID = string ; type Timestamp = number ; type ISO8601Date = string ; // API related type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' ; type ContentType = 'application/json' | 'multipart/form-data' | 'text/plain' ; Constants \u00b6 System Constants \u00b6 const API_VERSION = 'v1' ; const MAX_FILE_SIZE = 10 * 1024 * 1024 ; // 10MB const TOKEN_EXPIRY = 24 * 60 * 60 ; // 24 hours Error Codes \u00b6 enum ErrorCode { UNAUTHORIZED = 'ERR_UNAUTHORIZED' , NOT_FOUND = 'ERR_NOT_FOUND' , VALIDATION_FAILED = 'ERR_VALIDATION_FAILED' , SERVER_ERROR = 'ERR_SERVER_ERROR' } Utilities \u00b6 Validation Functions \u00b6 interface ValidationRule { type : string ; message : string ; validate : ( value : any ) => boolean ; } interface ValidationResult { isValid : boolean ; errors : string []; } Date Utilities \u00b6 interface DateFormat { format : string ; locale : string ; } interface TimeZone { id : string ; offset : number ; } Configuration \u00b6 Environment Variables \u00b6 interface EnvConfig { NODE_ENV : 'development' | 'production' | 'test' ; API_URL : string ; DEBUG_MODE : boolean ; } Feature Flags \u00b6 interface FeatureFlags { enableNewUI : boolean ; enableBetaFeatures : boolean ; maintenanceMode : boolean ; } Security \u00b6 Authentication \u00b6 interface AuthToken { token : string ; expires : number ; refreshToken : string ; } Encryption \u00b6 Encryption standards Key management Secure storage Logging \u00b6 Log Levels \u00b6 enum LogLevel { ERROR = 'error' , WARN = 'warn' , INFO = 'info' , DEBUG = 'debug' } Log Format \u00b6 ```typescript interface LogEntry { timestamp: ISO8601Date; level: LogLevel; message: string; context?: Record ; }","title":"Shared"},{"location":"specs/shared/#shared-specifications","text":"","title":"Shared Specifications"},{"location":"specs/shared/#overview","text":"This document outlines shared specifications and resources used across both frontend and backend components of the Farm project.","title":"Overview"},{"location":"specs/shared/#type-definitions","text":"","title":"Type Definitions"},{"location":"specs/shared/#common-types","text":"// User related types type UserRole = 'admin' | 'user' | 'guest' ; type UserStatus = 'active' | 'inactive' | 'suspended' ; // Data types type ID = string ; type Timestamp = number ; type ISO8601Date = string ; // API related type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' ; type ContentType = 'application/json' | 'multipart/form-data' | 'text/plain' ;","title":"Common Types"},{"location":"specs/shared/#constants","text":"","title":"Constants"},{"location":"specs/shared/#system-constants","text":"const API_VERSION = 'v1' ; const MAX_FILE_SIZE = 10 * 1024 * 1024 ; // 10MB const TOKEN_EXPIRY = 24 * 60 * 60 ; // 24 hours","title":"System Constants"},{"location":"specs/shared/#error-codes","text":"enum ErrorCode { UNAUTHORIZED = 'ERR_UNAUTHORIZED' , NOT_FOUND = 'ERR_NOT_FOUND' , VALIDATION_FAILED = 'ERR_VALIDATION_FAILED' , SERVER_ERROR = 'ERR_SERVER_ERROR' }","title":"Error Codes"},{"location":"specs/shared/#utilities","text":"","title":"Utilities"},{"location":"specs/shared/#validation-functions","text":"interface ValidationRule { type : string ; message : string ; validate : ( value : any ) => boolean ; } interface ValidationResult { isValid : boolean ; errors : string []; }","title":"Validation Functions"},{"location":"specs/shared/#date-utilities","text":"interface DateFormat { format : string ; locale : string ; } interface TimeZone { id : string ; offset : number ; }","title":"Date Utilities"},{"location":"specs/shared/#configuration","text":"","title":"Configuration"},{"location":"specs/shared/#environment-variables","text":"interface EnvConfig { NODE_ENV : 'development' | 'production' | 'test' ; API_URL : string ; DEBUG_MODE : boolean ; }","title":"Environment Variables"},{"location":"specs/shared/#feature-flags","text":"interface FeatureFlags { enableNewUI : boolean ; enableBetaFeatures : boolean ; maintenanceMode : boolean ; }","title":"Feature Flags"},{"location":"specs/shared/#security","text":"","title":"Security"},{"location":"specs/shared/#authentication","text":"interface AuthToken { token : string ; expires : number ; refreshToken : string ; }","title":"Authentication"},{"location":"specs/shared/#encryption","text":"Encryption standards Key management Secure storage","title":"Encryption"},{"location":"specs/shared/#logging","text":"","title":"Logging"},{"location":"specs/shared/#log-levels","text":"enum LogLevel { ERROR = 'error' , WARN = 'warn' , INFO = 'info' , DEBUG = 'debug' }","title":"Log Levels"},{"location":"specs/shared/#log-format","text":"```typescript interface LogEntry { timestamp: ISO8601Date; level: LogLevel; message: string; context?: Record ; }","title":"Log Format"}]}