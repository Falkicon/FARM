@module: shared
@version: 1.0.0
@priority: High
@dependencies: ["typescript", "zod", "vitest"]

overview: |
  The shared module provides common utilities, types, and functionality used across
  both frontend and backend modules. It ensures type safety, consistent validation,
  and reduces code duplication while maintaining a single source of truth.

core_components:
  types:
    purpose: "Type definitions shared across modules"
    categories:
      - name: "Data Models"
        description: "Core data structure definitions"
      - name: "API Interfaces"
        description: "Request/Response type definitions"
      - name: "Utility Types"
        description: "Helper and utility type definitions"

  constants:
    purpose: "Shared configuration and constants"
    categories:
      - name: "Environment"
        description: "Environment-specific configurations"
      - name: "Feature Flags"
        description: "Feature toggle definitions"
      - name: "API Endpoints"
        description: "API route definitions"

  utilities:
    purpose: "Common utility functions"
    categories:
      - name: "Date Handling"
        description: "Date formatting and manipulation"
      - name: "Validation"
        description: "Input validation helpers"
      - name: "String Manipulation"
        description: "String formatting and processing"

validation:
  schema:
    tool: "Zod"
    features:
      - "Runtime type checking"
      - "Data validation"
      - "Error messages"
      - "Type inference"

  patterns:
    - "Single source of truth for types"
    - "Consistent error handling"
    - "Shared validation rules"

testing:
  unit:
    tool: "Vitest"
    coverage_target: 90%
    focus_areas:
      - "Utility functions"
      - "Type validations"
      - "Constants integrity"

  integration:
    tool: "Vitest"
    focus_areas:
      - "Cross-module type compatibility"
      - "Validation rule consistency"
      - "Configuration integrity"

documentation:
  types:
    tool: "TypeDoc"
    outputs:
      - "Type definitions"
      - "Interface documentation"
      - "Utility function signatures"

  usage:
    formats:
      - "Markdown guides"
      - "Code examples"
      - "Integration patterns"

development_practices:
  code_organization:
    - "Feature-based directory structure"
    - "Clear module boundaries"
    - "Explicit exports"

  maintenance:
    - "Version tracking for shared types"
    - "Deprecation policies"
    - "Migration guides"

  standards:
    - "Consistent naming conventions"
    - "Documentation requirements"
    - "Test coverage thresholds"
