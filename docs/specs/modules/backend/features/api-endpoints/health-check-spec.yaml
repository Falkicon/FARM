@feature: health-check-api
@module: backend
@version: 1.0.0
@priority: High
@status: implemented
@dependencies: ["fastify", "os"]

overview: |
  The Health Check API provides comprehensive system health monitoring and metrics
  collection through a dedicated endpoint. It offers real-time insights into
  application status, performance metrics, and service health.

endpoints:
  health:
    path: "/health"
    method: "GET"
    description: "Returns detailed health and performance metrics"
    authentication: false
    rate_limiting: true
    caching:
      enabled: true
      duration: "30s"

response_schema:
  type: "object"
  properties:
    status:
      type: "string"
      enum: ["ok", "error"]
      description: "Overall status of the application"

    timestamp:
      type: "string"
      format: "ISO-8601"
      description: "ISO timestamp of health check"

    version:
      type: "string"
      description: "Application version number"

    environment:
      type: "string"
      description: "Current environment (development, production, etc.)"

    services:
      type: "object"
      properties:
        database:
          type: "object"
          properties:
            status:
              type: "string"
              enum: ["connected", "disconnected"]
            latency:
              type: "number"
              description: "Database query latency in milliseconds"

        api:
          type: "object"
          properties:
            status:
              type: "string"
              enum: ["ok", "error"]
            version:
              type: "string"
            features:
              type: "object"
              properties:
                cors: { type: "boolean" }
                helmet: { type: "boolean" }
                rateLimit: { type: "boolean" }
                multipart: { type: "boolean" }
                cache: { type: "boolean" }
                jwt: { type: "boolean" }

    metrics:
      type: "object"
      properties:
        memory:
          type: "object"
          properties:
            used: { type: "number", description: "Used heap memory in MB" }
            total: { type: "number", description: "Total heap memory in MB" }
            free: { type: "number", description: "Free heap memory in MB" }
        cpu:
          type: "object"
          properties:
            usage: { type: "number", description: "CPU usage percentage" }
            cores: { type: "number", description: "Number of CPU cores" }
        uptime:
          type: "number"
          description: "Server uptime in seconds"

monitoring:
  metrics_collected:
    - "Memory usage (heap)"
    - "CPU utilization"
    - "System uptime"
    - "Database latency"
    - "Service status"

  alerts:
    - condition: "status === 'error'"
      severity: "critical"
      action: "Notify DevOps team"

    - condition: "memory.used / memory.total > 0.9"
      severity: "warning"
      action: "Monitor memory consumption"

    - condition: "database.status === 'disconnected'"
      severity: "critical"
      action: "Check database connectivity"

testing:
  unit_tests:
    - "Verify response schema"
    - "Check metric calculations"
    - "Validate status conditions"

  integration_tests:
    - "Endpoint accessibility"
    - "Response format"
    - "Performance under load"

  performance_tests:
    - "Response time < 100ms"
    - "Support 1000 requests/minute"

documentation:
  usage_example: |
    ```typescript
    const response = await fetch('/health');
    const health: HealthStatus = await response.json();

    if (health.status === 'ok') {
      console.log('System is healthy');
      console.log(`Memory usage: ${health.metrics.memory.used}MB`);
      console.log(`Uptime: ${health.metrics.uptime}s`);
    }
    ```

  swagger_tags:
    - name: "Health Monitoring"
    - name: "System Metrics"

security:
  considerations:
    - "Rate limiting to prevent DoS"
    - "No sensitive information exposure"
    - "Public endpoint (no auth required)"
    - "Response caching for performance"
